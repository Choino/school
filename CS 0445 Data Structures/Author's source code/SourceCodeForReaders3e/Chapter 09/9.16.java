/** Sorts the first, middle, and last entries of an array    into ascending order.    @param a      an array of Comparable objects    @param first  the integer index of the first array entry;                   first >= 0 and < a.length     @param mid    the integer index of the middle array entry    @param last   the integer index of the last array entry;                   last - first >= 2, last < a.length */private static <T extends Comparable<? super T>>        void sortFirstMiddleLast(T[] a, int first, int mid, int last){   order(a, first, mid); // make a[first] <= a[mid]   order(a, mid, last);  // make a[mid] <= a[last]   order(a, first, mid); // make a[first] <= a[mid]} // end sortFirstMiddleLast/** Orders two given array elements into ascending order    so that a[i] <= a[j].    @param a  an array of Comparable objects    @param i  an integer >= 0 and < array.length    @param j  an integer >= 0 and < array.length */private static <T extends Comparable<? super T>>        void order(T[] a, int i, int j){   if (a[i].compareTo(a[j]) > 0)      swap(a, i, j);} // end order/** Swaps the array entries array[i] and array[j]. */private static void swap(Object[] array, int i, int j){   Object temp = array[i];   array[i] = array[j];   array[j] = temp; } // end swap