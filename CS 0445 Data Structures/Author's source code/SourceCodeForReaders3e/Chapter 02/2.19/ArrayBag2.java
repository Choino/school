/**    A class that implements a bag of objects by using an array.    INCOMPLETE DEFINITION.    @author Frank M. Carrano    @version 3.0*/public class ArrayBag2<T> implements BagInterface<T>{	private final T[] bag;	private static final int DEFAULT_CAPACITY = 25; 	private int numberOfEntries;	/** Creates an empty bag whose capacity is 25. */	public ArrayBag2() 	{		this(DEFAULT_CAPACITY);	} // end default constructor	/** Creates an empty bag having a given capacity.	    @param capacity  the integer capacity desired */	public ArrayBag2(int capacity) 	{		numberOfEntries = 0;      // the cast is safe because the new array contains null entries      @SuppressWarnings("unchecked")      T[] tempBag = (T[])new Object[capacity]; // unchecked cast      bag = tempBag;	} // end constructor	/** Adds a new entry to the bag.	    @param newEntry  the object to be added as a new entry	    @return true if the addition is successful, or false if not */	public boolean add(T newEntry)	{		boolean result = true;		if (isFull())		{			result = false;		}		else		{  // assertion: result is true here			bag[numberOfEntries] = newEntry;			numberOfEntries++;		} // end if				return result;	} // end add	/** Retrieves all entries that are in this bag.		 @return a newly allocated array of all the entries in this bag */	public T[] toArray()	{      // the cast is safe because the new array contains null entries      @SuppressWarnings("unchecked")		T[] result = (T[])new Object[numberOfEntries]; // unchecked cast		for (int index = 0; index < numberOfEntries; index++) 		{			result[index] = bag[index];		} // end for					return result;      // Note: The body of this method could consist of one return statement,      // if you call Arrays.copyOf	} // end toArray	/** Sees whether this bag is full.       @return true if this bag is full, or false if not */	public boolean isFull() 	{		return numberOfEntries == bag.length;	} // end isFull		/** Sees whether this bag is empty.	    @return true if this bag is empty, or false if not */	public boolean isEmpty() 	{		return numberOfEntries == 0;	} // end isEmpty	/** Gets the current number of objects in this bag.		 @return the integer number of objects currently in the bag */	public int getCurrentSize() 	{		return numberOfEntries;	} // end getCurrentSize	/** Counts the number of times a given entry appears in a bag.		 @param anEntry  the entry to be counted		 @return the number of times anEntry appears in the bag */	public int getFrequencyOf(T anEntry) 	{		int counter = 0;		for (int index = 0; index < numberOfEntries; index++) 		{			if (anEntry.equals(bag[index]))			{				counter++;			} // end if		} // end for		return counter;	} // end getFrequencyOf	/** Tests whether this bag contains a given entry.		 @param anEntry  the entry to locate		 @return true if this bag contains anEntry, or false otherwise */	public boolean contains(T anEntry) 	{		boolean found = false;		for (int index = 0; !found && (index < numberOfEntries); index++) 		{			if (anEntry.equals(bag[index]))			{				found = true;			} // end if		} // end for		return found;	} // end contains      /** Removes one unspecified entry from this bag, if possible.    @return either the removed entry, if the removal            was successful, or null */	public T remove()   {      return null; // STUB   } // end remove   	/** Removes one occurrence of a given entry from this bag.       @param anEntry  the entry to be removed       @return true if the removal was successful, or false otherwise */   public boolean remove(T anEntry)   {      return false; // STUB   } // end remove		/** Removes all entries from this bag. */	public void clear()   {      // STUB   } // end clear} // end ArrayBag2