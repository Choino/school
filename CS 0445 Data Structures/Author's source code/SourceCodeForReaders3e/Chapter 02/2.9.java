/**    A class of bags whose entries are stored in a fixed-size array.    @author Frank M. Carrano    @version 3.0*/public class ArrayBag<T> implements BagInterface<T>{	private final T[] bag; 	private static final int DEFAULT_CAPACITY = 25;	private int numberOfEntries;	/** Creates an empty bag whose initial capacity is 25. */	public ArrayBag() 	{		this(DEFAULT_CAPACITY);	} // end default constructor	/** Creates an empty bag having a given initial capacity.	    @param capacity  the integer capacity desired */	public ArrayBag(int capacity) 	{		numberOfEntries = 0;      // the cast is safe because the new array contains null entries      @SuppressWarnings("unchecked")      T[] tempBag = (T[])new Object[capacity]; // unchecked cast      bag = tempBag;	} // end constructor	/** Adds a new entry to this bag.	    @param newEntry  the object to be added as a new entry	    @return true if the addition is successful, or false if not */	public boolean add(T newEntry) 	{		// To be defined	} // end add	/** Sees whether this bag is full.       @return true if this bag is full, or false if not */	public boolean isFull() 	{		// To be defined	} // end isFull		/** Retrieves all entries that are in this bag.		 @return a newly allocated array of all the entries in the bag */	public T[] toArray()	{		// To be defined	} // end toArray	/** Sees whether this bag is empty.	    @return true if this bag is empty, or false if not */	public boolean isEmpty() 	{		// To be defined	} // end isEmpty	/** Gets the current number of objects in this bag.		 @return the integer number of objects currently in the bag */	public int getCurrentSize() 	{		// To be defined	} // end getCurrentSize	/** Counts the number of times a given entry appears in this bag.		 @param anEntry  the entry to be counted		 @return the number of times anEntry appears in the bag */	public int getFrequencyOf(T anEntry) 	{		// To be defined	} // end getFrequencyOf	/** Tests whether this bag contains a given entry.		 @param anEntry  the entry to locate		 @return true if this bag contains anEntry, or false otherwise */   public boolean contains(T anEntry) 	{		// To be defined	} // end contains   	/** Removes all entries from this bag. */	public void clear() 	{		// To be defined	} // end clear		/** Removes one unspecified entry from this bag, if possible.       @return either the removed entry, if the removal               was successful, or null */	public T remove()	{		// To be defined	} // end remove		/** Removes one occurrence of a given entry from this bag.       @param anEntry  the entry to be removed       @return true if the removal was successful, or false otherwise */	public boolean remove(T anEntry) 	{		// To be defined	} // end remove} // end ArrayBag