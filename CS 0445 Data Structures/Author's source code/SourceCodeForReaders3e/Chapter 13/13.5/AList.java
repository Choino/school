import java.util.Arrays;/**   A class that implements the ADT list by using an array.   The list is never full.   @author Frank M. Carrano*/public class AList<T> implements ListInterface<T>{	private T[] list;   // array of list entries	private int numberOfEntries;	private static final int DEFAULT_INITIAL_CAPACITY = 25;    	public AList()	{    this(MAX_SIZE); // call next constructor 	} // end default constructor   public AList(int initialCapacity)   {      numberOfEntries = 0;      // the cast is safe because the new array contains null entries      @SuppressWarnings("unchecked")      T[] tempList = (T[])new Object[initialCapacity];      list = tempList;    } // end constructor	public void add(T newEntry)	{        ensureCapacity();      list[numberOfEntries] = newEntry;      numberOfEntries++;	} // end add	public boolean add(int newPosition, T newEntry) 	{  /* < Implementation deferred > */	} // end add	public T remove(int givenPosition)	{ /* < Implementation deferred > */	} // end remove	public void clear()	{ /* < Implementation deferred > */	} // end clear	public boolean replace(int givenPosition, T newEntry) 	{ /* < Implementation deferred > */	} // end replace	public T getEntry(int givenPosition) 	{ /* < Implementation deferred > */	} // end getEntry	public boolean contains(T anEntry) 	{ /* < Implementation deferred > */	} // end contains	public int getLength()	{		return numberOfEntries;	} // end getLength	public boolean isEmpty()	{		return numberOfEntries == 0; // or getLength() == 0	} // end isEmpty   public T[] toArray()   {      // the cast is safe because the new array contains null entries      @SuppressWarnings("unchecked")      T[] result = (T[])new Object[numberOfEntries];            for (int index = 0; index < numberOfEntries; index++)      {         result[index] = list[index];      } // end for            return result;   } // end toArray      // Doubles the size of the array list if it is full.   private void ensureCapacity()   {      if (numberOfEntries == list.length)         list = Arrays.copyOf(list, 2 * list.length);   } // end ensureCapacity	/* < This class will define two private methods that will be discussed later. > */} // end AList