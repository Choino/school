/**   A linked implementation of the ADT list.   @author Frank M. Carrano   @version 2.0*/public class LList<T> implements ListInterface<T>{	private Node firstNode; // reference to first node	private int  numberOfEntries; 	public LList()	{		clear();	} // end default constructor		public final void clear() // note the final method	{		firstNode = null;		numberOfEntries = 0;	} // end clear  /*  < Implementations of the public methods add, remove, replace, getEntry, contains,       getLength, isEmpty, and toArray go here. >  . . . */  	// Returns a reference to the node at a given position.   // Precondition: List is not empty;   //               1 <= givenPosition <= numberOfEntries		private Node getNodeAt(int givenPosition)	{		assert !isEmpty() && (1 <= givenPosition) && (givenPosition <= numberOfEntries);		Node currentNode = firstNode;		      // traverse the list to locate the desired node		for (int counter = 1; counter < givenPosition; counter++)			currentNode = currentNode.getNextNode();				assert currentNode != null;      		return currentNode;	} // end getNodeAt     private class Node   {      private T data; // entry in bag      private Node next; // link to next node            private Node(T dataPortion)      {         this(dataPortion, null);      } // end constructor            private Node(T dataPortion, Node nextNode)      {         data = dataPortion;         next = nextNode;      } // end constructor            private T getData()      {         return data;      } // end getData            private void setData(T newData)      {         data = newData;      } // end setData            private Node getNextNode()      {         return next;      } // end getNextNode            private void setNextNode(Node nextNode)      {         next = nextNode;      } // end setNextNode   } // end Node} // end LList