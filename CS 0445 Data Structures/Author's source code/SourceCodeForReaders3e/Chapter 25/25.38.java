private NodePair getNodeToRemove(BinaryNodeInterface<T> currentNode){   // find node with largest entry in left subtree by   // moving as far right in the subtree as possible   BinaryNodeInterface<T> leftSubtreeRoot = currentNode.getLeftChild();   BinaryNodeInterface<T> rightChild = leftSubtreeRoot;   BinaryNodeInterface<T> priorNode = currentNode;   while (rightChild.hasRightChild())   {      priorNode = rightChild;      rightChild = rightChild.getRightChild();   } // end while   // rightChild contains the inorder predecessor and is the node to    // remove; priorNode is its parent   return new NodePair(rightChild, priorNode);} // end getNodeToRemove