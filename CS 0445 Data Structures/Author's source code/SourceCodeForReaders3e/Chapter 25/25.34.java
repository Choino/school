// Removes the node containing the largest entry in a given tree.// rootNode is the root node of the tree.// Returns the root node of the revised tree.private BinaryNodeInterface<T> removeLargest(BinaryNodeInterface<T> rootNode){   if (rootNode.hasRightChild())   {      BinaryNodeInterface<T> rightChild = rootNode.getRightChild();      BinaryNodeInterface<T> root = removeLargest(rightChild);      rootNode.setRightChild(root);   }   else       rootNode = rootNode.getLeftChild();       return rootNode;} // end removeLargest