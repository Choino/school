// Removes an entry from the tree rooted at a given node.// rootNode is a reference to the root of a tree.// entry is the object to be removed.// oldEntry is an object whose data field is null.// Returns the root node of the resulting tree; if entry matches// an entry in the tree, oldEntry's data field is the entry// that was removed from the tree; otherwise it is null.private BinaryNodeInterface<T> removeEntry(BinaryNodeInterface<T> rootNode,                                            T entry, ReturnObject oldEntry){   if (rootNode != null)   {      T rootData = rootNode.getData();      int comparison = entry.compareTo(rootData);      if (comparison == 0)       // entry == root entry      {         oldEntry.set(rootData);         rootNode = removeFromRoot(rootNode);      }      else if (comparison < 0)   // entry < root entry      {         BinaryNodeInterface<T> leftChild = rootNode.getLeftChild();         BinaryNodeInterface<T> subtreeRoot = removeEntry(leftChild, entry, oldEntry);         rootNode.setLeftChild(subtreeRoot);      }      else                       // entry > root entry      {         BinaryNodeInterface<T> rightChild = rootNode.getRightChild();         rootNode.setRightChild(removeEntry(rightChild, entry, oldEntry));      } // end if   } // end if   return rootNode;} // end removeEntry