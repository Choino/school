// Adds newEntry to the nonempty subtree rooted at rootNode.private T addEntry(BinaryNodeInterface<T> rootNode, T newEntry){   assert rootNode != null;   T result = null;   int comparison = newEntry.compareTo(rootNode.getData());   if (comparison == 0)   {      result = rootNode.getData();      rootNode.setData(newEntry);   }   else if (comparison < 0)   {      if (rootNode.hasLeftChild())         result = addEntry(rootNode.getLeftChild(), newEntry);      else         rootNode.setLeftChild(new BinaryNode<T>(newEntry));   }   else   {      assert comparison > 0;      if (rootNode.hasRightChild())         result = addEntry(rootNode.getRightChild(), newEntry);      else         rootNode.setRightChild(new BinaryNode<T>(newEntry));   } // end if   return result;} // end addEntry