// Removes the entry in a given root node of a subtree.// rootNode is the root node of the subtree.// Returns the root node of the revised subtree.private BinaryNodeInterface<T> removeFromRoot(BinaryNodeInterface<T> rootNode){   // Case 1: rootNode has two children    if (rootNode.hasLeftChild() && rootNode.hasRightChild())   {      // find node with largest entry in left subtree      BinaryNodeInterface<T> leftSubtreeRoot = rootNode.getLeftChild();      BinaryNodeInterface<T> largestNode = findLargest(leftSubtreeRoot);      // replace entry in root      rootNode.setData(largestNode.getData());      // remove node with largest entry in left subtree      rootNode.setLeftChild(removeLargest(leftSubtreeRoot));   } // end if    // Case 2: rootNode has at most one child   else if (rootNode.hasRightChild())      rootNode = rootNode.getRightChild();   else      rootNode = rootNode.getLeftChild();       // Assertion: if rootNode was a leaf, it is now null   return rootNode; } // end removeEntry