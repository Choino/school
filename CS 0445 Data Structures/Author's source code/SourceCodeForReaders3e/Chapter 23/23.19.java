// represent each leaf as a one-node treeBinaryTreeInterface<String> dTree = new BinaryTree<String>();dTree.setTree("D");BinaryTreeInterface<String> fTree = new BinaryTree<String>();fTree.setTree("F");BinaryTreeInterface<String> gTree = new BinaryTree<String>();gTree.setTree("G");BinaryTreeInterface<String> hTree = new BinaryTree<String>();hTree.setTree("H");BinaryTreeInterface<String> emptyTree = new BinaryTree<String>();// form larger subtreesBinaryTreeInterface<String> eTree = new BinaryTree<String>();eTree.setTree("E", fTree, gTree); // subtree rooted at EBinaryTreeInterface<String> bTree = new BinaryTree<String>();bTree.setTree("B", dTree, eTree); // subtree rooted at BBinaryTreeInterface<String> cTree = new BinaryTree<String>();cTree.setTree("C", emptyTree, hTree); // subtree rooted at CBinaryTreeInterface<String> aTree = new BinaryTree<String>();aTree.setTree("A", bTree, cTree); // desired tree rooted at A// display root, height, number of nodesSystem.out.println("Root of tree contains " + aTree.getRootData());System.out.println("Height of tree is " + aTree.getHeight());System.out.println("Tree has " + aTree.getNumberOfNodes() + " nodes");                   // display nodes in preorderSystem.out.println("A preorder traversal visits nodes in this order:");Iterator<String> preorder = aTree.getPreorderIterator();while (preorder.hasNext())   System.out.print(preorder.next() + " ");System.out.println();