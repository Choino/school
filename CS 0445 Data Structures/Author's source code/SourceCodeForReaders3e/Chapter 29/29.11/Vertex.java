package GraphPackage;import java.util.Iterator;import java.util.NoSuchElementException;import ADTPackage.*; // classes that implement various ADTsclass Vertex<T> implements VertexInterface<T>{   private T label;    private ListWithIteratorInterface<Edge> edgeList; // edges to neighbors   private boolean visited;                          // true if visited   private VertexInterface<T> previousVertex;        // on path to this vertex   private double cost;                              // of path to this vertex   public Vertex(T vertexLabel)   {      label = vertexLabel;      edgeList = new LinkedListWithIterator<Edge>();      visited = false;      previousVertex = null;       cost = 0;   } // end constructor   // < Implementations of the vertex operations go here. >   // . . .   protected class Edge   {      private VertexInterface<T> vertex; // end vertex      private double weight;      protected Edge(VertexInterface<T> endVertex, double edgeWeight)      {         vertex = endVertex;         weight = edgeWeight;      } // end constructor      protected VertexInterface<T> getEndVertex()      {         return vertex;       } // end getEndVertex      protected double getWeight()       {         return weight;       } // end getWeight   } // end Edge} // end Vertex