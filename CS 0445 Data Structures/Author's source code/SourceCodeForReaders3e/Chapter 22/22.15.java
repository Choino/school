private int probe(int index, K key){   boolean found = false;   int removedStateIndex = -1; // index of first location in                               // removed state   while ( !found && (hashTable[index] != null) )   {      if (hashTable[index].isIn())      {         if (key.equals(hashTable[index].getKey()))            found = true; // key found         else // follow probe sequence            index = (index + 1) % hashTable.length; // linear probing      }      else // skip entries that were removed      {         // save index of first location in removed state         if (removedStateIndex == -1)            removedStateIndex = index;                    index = (index + 1) % hashTable.length; // linear probing      } // end if   } // end while   // Assertion: either key or null is found at hashTable[index]   if (found || (removedStateIndex == -1) )      return index;             // index of either key or null   else      return removedStateIndex; // index of an available location} // end probe