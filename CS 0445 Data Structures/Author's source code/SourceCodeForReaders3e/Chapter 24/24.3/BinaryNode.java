package TreePackage;class BinaryNode<T> implements BinaryNodeInterface<T>{   private T data;   private BinaryNode<T> left;   private BinaryNode<T> right;   public BinaryNode()   {      this(null); // call next constructor   } // end default constructor   public BinaryNode(T dataPortion)   {      this(dataPortion, null, null); // call next constructor   } // end constructor   public BinaryNode(T dataPortion, BinaryNode<T> leftChild,                                    BinaryNode<T> rightChild)   {      data = dataPortion;      left = leftChild;      right = rightChild;   } // end constructor   public T getData()   {      return data;   } // end getData   public void setData(T newData)   {      data = newData;   } // end setData   public BinaryNodeInterface<T> getLeftChild()   {      return left;   } // end getLeftChild   public void setLeftChild(BinaryNodeInterface<T> leftChild)   {      left = (BinaryNode<T>)leftChild;   } // end setLeftChild   public boolean hasLeftChild()   {      return left != null;   } // end hasLeftChild   public boolean isLeaf()   {      return (left == null) && (right == null);   } // end isLeaf   //  < Implementations of getRightChild, setRightChild, and hasRightChild are    //    analogous to their left-child counterparts. >   //  < Implementation of copy appears in Segment 24.6. >   //  < Implementations of getHeight and getNumberOfNodes appear in Segment 24.11. >   //  . . .} // end BinaryNode