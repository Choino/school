/** Finds the node that is before the node that should or does    contain a given entry.    @param anEntry the object to be located    @return either a reference to the node that is before the node            that contains or should contain anEntry, or null if            no prior node exists (that is, if anEntry belongs at            the beginning of the list) */private Node getNodeBefore(T anEntry){   Node currentNode = firstNode;   Node nodeBefore = null;   while ( (currentNode != null) &&            (anEntry.compareTo(currentNode.getData()) > 0) )   {      nodeBefore = currentNode;      currentNode = currentNode.getNextNode();   } // end while   return nodeBefore;} // end getNodeBefore