/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>BestLexer.flex</tt>
 */
class BestLexer implements java_cup.runtime.Scanner, sym {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\7\1\5\1\0\1\7\1\4\22\0\1\7\1\33\4\0"+
    "\1\46\1\0\1\31\1\32\1\11\1\50\1\45\1\2\1\20\1\10"+
    "\1\1\11\3\1\0\1\52\1\47\1\51\3\0\1\37\1\55\1\56"+
    "\1\42\1\16\1\36\1\40\1\35\1\26\2\6\1\30\1\17\1\27"+
    "\1\21\1\23\1\6\1\24\1\13\1\15\1\22\1\57\1\34\1\41"+
    "\1\14\1\6\1\43\1\0\1\44\1\60\1\6\1\0\1\37\1\55"+
    "\1\56\1\42\1\16\1\36\1\40\1\35\1\26\2\6\1\30\1\17"+
    "\1\27\1\21\1\23\1\6\1\24\1\13\1\15\1\22\1\57\1\34"+
    "\1\41\1\14\1\6\1\53\1\0\1\54\262\0\2\25\115\0\1\12"+
    "\ufe80\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\2\3\1\4\1\5\1\0"+
    "\1\6\1\0\4\4\1\7\2\4\1\0\3\4\1\10"+
    "\1\11\1\12\2\4\1\13\1\14\1\15\1\0\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\3\4\1\24\3\0"+
    "\11\4\1\0\1\25\1\4\1\25\4\4\1\0\1\26"+
    "\3\4\2\24\4\0\4\4\1\0\1\4\1\0\2\4"+
    "\1\0\3\4\2\27\1\30\1\4\1\0\2\4\1\31"+
    "\2\4\1\0\1\4\3\0\3\4\1\32\2\33\2\34"+
    "\1\4\2\35\3\4\1\0\1\4\1\0\2\4\1\0"+
    "\1\4\2\36\3\0\4\4\1\0\3\4\2\37\2\40"+
    "\1\4\2\41\1\0\1\42\1\43\1\4\1\42\1\43"+
    "\1\4\2\44\1\45\1\46\1\4\1\0\2\47\1\50"+
    "\12\0\1\51";

  private static int [] zzUnpackAction() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\61\0\365\0\61"+
    "\0\u0126\0\61\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\61"+
    "\0\u024c\0\u027d\0\u02ae\0\u02df\0\u0310\0\u0341\0\61\0\61"+
    "\0\61\0\u0372\0\u03a3\0\u03d4\0\61\0\61\0\u0405\0\61"+
    "\0\61\0\61\0\61\0\61\0\61\0\u0436\0\u0467\0\u0498"+
    "\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d\0\u05be\0\u05ef\0\u0620"+
    "\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746\0\61\0\u0777"+
    "\0\365\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c\0\61\0\u089d"+
    "\0\u08ce\0\u08ff\0\u0930\0\61\0\u0961\0\u0992\0\u09c3\0\u09f4"+
    "\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c"+
    "\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\61\0\365\0\365"+
    "\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\61\0\u0d66\0\u0d97\0\u0dc8"+
    "\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\365"+
    "\0\61\0\365\0\61\0\365\0\u0f50\0\61\0\365\0\u0f81"+
    "\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109"+
    "\0\u113a\0\61\0\365\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f"+
    "\0\u1260\0\u1291\0\u12c2\0\u12f3\0\u1324\0\u1355\0\61\0\365"+
    "\0\61\0\365\0\u1386\0\61\0\365\0\u13b7\0\61\0\61"+
    "\0\u13e8\0\365\0\365\0\u1419\0\61\0\365\0\365\0\365"+
    "\0\u144a\0\u147b\0\61\0\365\0\365\0\u14ac\0\u14dd\0\u150e"+
    "\0\u153f\0\u1570\0\u15a1\0\u15d2\0\u1603\0\u1634\0\u1665\0\61";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\7\1\15\1\16\1\17"+
    "\1\20\2\7\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\7\1\33\4\7\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\65\0\1\4\56\0\1\4"+
    "\1\0\1\4\62\0\1\6\54\0\1\7\1\0\1\7"+
    "\2\0\1\7\4\0\5\7\1\0\4\7\1\0\3\7"+
    "\3\0\7\7\12\0\3\7\11\0\1\51\1\52\63\0"+
    "\1\53\1\54\44\0\1\7\1\0\1\7\2\0\1\7"+
    "\4\0\1\7\1\55\1\56\2\7\1\0\4\7\1\0"+
    "\3\7\3\0\7\7\12\0\3\7\2\0\1\7\1\0"+
    "\1\7\2\0\1\7\4\0\5\7\1\0\3\7\1\57"+
    "\1\0\3\7\3\0\1\7\1\60\5\7\12\0\3\7"+
    "\2\0\1\7\1\0\1\7\2\0\1\7\4\0\5\7"+
    "\1\0\4\7\1\0\2\7\1\61\3\0\5\7\1\62"+
    "\1\7\12\0\3\7\2\0\1\7\1\0\1\7\2\0"+
    "\1\7\4\0\5\7\1\0\4\7\1\0\3\7\3\0"+
    "\3\7\1\63\3\7\12\0\3\7\2\0\1\7\1\0"+
    "\1\7\2\0\1\7\4\0\5\7\1\0\1\7\1\64"+
    "\2\7\1\0\3\7\3\0\7\7\12\0\3\7\2\0"+
    "\1\7\1\0\1\7\2\0\1\7\4\0\3\7\1\65"+
    "\1\7\1\0\4\7\1\0\3\7\3\0\7\7\12\0"+
    "\3\7\30\0\1\66\6\0\1\67\23\0\1\7\1\0"+
    "\1\7\2\0\1\7\4\0\5\7\1\0\4\7\1\0"+
    "\1\7\1\70\1\7\3\0\2\7\1\71\4\7\12\0"+
    "\3\7\2\0\1\7\1\0\1\7\2\0\1\7\4\0"+
    "\3\7\1\72\1\7\1\0\4\7\1\0\3\7\3\0"+
    "\7\7\12\0\3\7\2\0\1\7\1\0\1\7\2\0"+
    "\1\7\4\0\3\7\1\73\1\7\1\0\4\7\1\0"+
    "\3\7\3\0\7\7\12\0\3\7\2\0\1\7\1\0"+
    "\1\7\2\0\1\7\4\0\5\7\1\0\4\7\1\0"+
    "\3\7\3\0\1\7\1\74\5\7\12\0\3\7\2\0"+
    "\1\7\1\0\1\7\2\0\1\7\4\0\5\7\1\0"+
    "\4\7\1\0\3\7\3\0\3\7\1\75\3\7\12\0"+
    "\3\7\61\0\1\76\46\0\1\77\13\0\1\7\1\0"+
    "\1\7\2\0\1\7\4\0\5\7\1\0\1\100\3\7"+
    "\1\0\3\7\3\0\7\7\12\0\3\7\2\0\1\7"+
    "\1\0\1\7\2\0\1\7\4\0\5\7\1\0\4\7"+
    "\1\0\2\7\1\101\3\0\7\7\12\0\3\7\2\0"+
    "\1\7\1\0\1\7\2\0\1\7\4\0\5\7\1\0"+
    "\1\102\3\7\1\0\3\7\3\0\7\7\12\0\3\7"+
    "\1\0\4\51\1\103\1\104\53\51\11\52\1\105\47\52"+
    "\12\0\2\106\71\0\1\107\12\0\1\110\22\0\1\7"+
    "\1\0\1\7\2\0\1\7\3\0\1\106\1\111\4\7"+
    "\1\0\4\7\1\0\3\7\3\0\7\7\12\0\3\7"+
    "\2\0\1\7\1\0\1\7\2\0\1\7\4\0\5\7"+
    "\1\0\3\7\1\112\1\0\3\7\3\0\3\7\1\113"+
    "\3\7\12\0\3\7\2\0\1\7\1\0\1\7\2\0"+
    "\1\7\4\0\5\7\1\0\1\7\1\114\2\7\1\0"+
    "\3\7\3\0\7\7\12\0\3\7\2\0\1\7\1\0"+
    "\1\7\2\0\1\7\4\0\5\7\1\0\4\7\1\115"+
    "\1\116\2\7\3\0\7\7\12\0\3\7\2\0\1\7"+
    "\1\0\1\7\2\0\1\7\3\0\1\117\1\120\4\7"+
    "\1\0\4\7\1\0\3\7\3\0\7\7\12\0\3\7"+
    "\2\0\1\7\1\0\1\7\2\0\1\7\4\0\2\7"+
    "\1\121\2\7\1\0\4\7\1\0\3\7\3\0\7\7"+
    "\12\0\3\7\2\0\1\7\1\0\1\7\2\0\1\7"+
    "\4\0\5\7\1\0\4\7\1\122\1\123\2\7\3\0"+
    "\7\7\12\0\3\7\2\0\1\7\1\0\1\7\2\0"+
    "\1\7\4\0\5\7\1\0\4\7\1\0\3\7\3\0"+
    "\7\7\12\0\1\124\2\7\2\0\1\7\1\0\1\7"+
    "\2\0\1\7\4\0\2\7\1\125\2\7\1\0\4\7"+
    "\1\0\3\7\3\0\7\7\12\0\3\7\16\0\1\126"+
    "\44\0\1\7\1\0\1\7\2\0\1\7\4\0\2\7"+
    "\1\127\2\7\1\0\4\7\1\0\3\7\3\0\7\7"+
    "\12\0\3\7\2\0\1\7\1\0\1\7\2\0\1\7"+
    "\4\0\5\7\1\0\4\7\1\0\3\7\3\0\1\130"+
    "\6\7\12\0\3\7\2\0\1\7\1\0\1\7\2\0"+
    "\1\7\4\0\5\7\1\0\4\7\1\0\1\7\1\131"+
    "\1\7\3\0\7\7\12\0\3\7\2\0\1\7\1\0"+
    "\1\7\2\0\1\7\4\0\5\7\1\0\4\7\1\132"+
    "\1\133\2\7\3\0\7\7\12\0\3\7\2\0\1\7"+
    "\1\0\1\7\2\0\1\7\4\0\5\7\1\0\4\7"+
    "\1\0\2\7\1\134\3\0\7\7\12\0\3\7\45\0"+
    "\1\135\15\0\1\7\1\0\1\7\2\0\1\7\4\0"+
    "\5\7\1\0\1\136\3\7\1\0\3\7\3\0\7\7"+
    "\12\0\3\7\2\0\1\7\1\0\1\7\2\0\1\7"+
    "\4\0\5\7\1\0\4\7\1\0\3\7\3\0\3\7"+
    "\1\137\3\7\12\0\3\7\2\0\1\7\1\0\1\7"+
    "\2\0\1\7\4\0\5\7\1\0\4\7\1\140\1\141"+
    "\2\7\3\0\7\7\12\0\3\7\6\0\1\104\53\0"+
    "\10\52\1\104\1\105\47\52\15\0\1\142\70\0\2\143"+
    "\47\0\1\144\44\0\1\7\1\0\1\7\2\0\1\7"+
    "\4\0\2\7\1\145\2\7\1\0\4\7\1\0\3\7"+
    "\3\0\7\7\12\0\3\7\2\0\1\7\1\0\1\7"+
    "\2\0\1\7\4\0\5\7\1\0\4\7\1\143\1\146"+
    "\2\7\3\0\7\7\12\0\3\7\2\0\1\7\1\0"+
    "\1\7\2\0\1\7\4\0\2\7\1\147\2\7\1\0"+
    "\4\7\1\0\3\7\3\0\7\7\12\0\3\7\2\0"+
    "\1\7\1\0\1\7\2\0\1\7\4\0\3\7\1\150"+
    "\1\7\1\0\4\7\1\0\3\7\3\0\7\7\12\0"+
    "\3\7\13\0\2\151\46\0\1\7\1\0\1\7\2\0"+
    "\1\7\3\0\1\151\1\152\4\7\1\0\4\7\1\0"+
    "\3\7\3\0\7\7\12\0\3\7\17\0\1\153\43\0"+
    "\1\7\1\0\1\7\2\0\1\7\4\0\3\7\1\154"+
    "\1\7\1\0\4\7\1\0\3\7\3\0\7\7\12\0"+
    "\3\7\2\0\1\7\1\0\1\7\2\0\1\7\4\0"+
    "\3\7\1\155\1\7\1\0\4\7\1\0\3\7\3\0"+
    "\7\7\12\0\3\7\30\0\1\156\32\0\1\7\1\0"+
    "\1\7\2\0\1\7\4\0\5\7\1\0\4\7\1\0"+
    "\1\7\1\157\1\7\3\0\7\7\12\0\3\7\2\0"+
    "\1\7\1\0\1\7\2\0\1\7\4\0\5\7\1\0"+
    "\4\7\1\0\2\7\1\160\3\0\7\7\12\0\3\7"+
    "\2\0\1\7\1\0\1\7\2\0\1\7\4\0\5\7"+
    "\1\0\1\7\1\161\2\7\1\0\3\7\3\0\7\7"+
    "\12\0\3\7\2\0\1\7\1\0\1\7\2\0\1\7"+
    "\4\0\5\7\1\0\4\7\1\0\3\7\3\0\4\7"+
    "\1\162\2\7\12\0\3\7\31\0\1\163\31\0\1\7"+
    "\1\0\1\7\2\0\1\7\4\0\5\7\1\0\4\7"+
    "\1\0\2\7\1\164\3\0\7\7\12\0\3\7\2\0"+
    "\1\7\1\0\1\7\2\0\1\7\3\0\1\165\1\166"+
    "\4\7\1\0\4\7\1\0\3\7\3\0\7\7\12\0"+
    "\3\7\2\0\1\7\1\0\1\7\2\0\1\7\4\0"+
    "\5\7\1\0\4\7\1\0\2\7\1\167\3\0\7\7"+
    "\12\0\3\7\2\0\1\7\1\0\1\7\2\0\1\7"+
    "\3\0\1\170\1\171\4\7\1\0\4\7\1\0\3\7"+
    "\3\0\7\7\12\0\3\7\43\0\1\172\17\0\1\7"+
    "\1\0\1\7\2\0\1\7\4\0\5\7\1\0\4\7"+
    "\1\0\3\7\3\0\6\7\1\173\12\0\3\7\17\0"+
    "\1\174\71\0\1\175\56\0\2\176\33\0\1\7\1\0"+
    "\1\7\2\0\1\7\4\0\3\7\1\177\1\7\1\0"+
    "\4\7\1\0\3\7\3\0\7\7\12\0\3\7\2\0"+
    "\1\7\1\0\1\7\2\0\1\7\4\0\5\7\1\0"+
    "\4\7\1\0\1\7\1\200\1\7\3\0\7\7\12\0"+
    "\3\7\2\0\1\7\1\0\1\7\2\0\1\7\4\0"+
    "\5\7\1\0\4\7\1\176\1\201\2\7\3\0\7\7"+
    "\12\0\3\7\2\0\1\7\1\0\1\7\2\0\1\7"+
    "\4\0\5\7\1\0\4\7\1\0\1\7\1\202\1\7"+
    "\3\0\7\7\12\0\3\7\2\0\1\7\1\0\1\7"+
    "\2\0\1\7\4\0\5\7\1\0\4\7\1\203\1\204"+
    "\2\7\3\0\7\7\12\0\3\7\2\0\1\7\1\0"+
    "\1\7\2\0\1\7\4\0\5\7\1\0\3\7\1\205"+
    "\1\0\3\7\3\0\7\7\12\0\3\7\2\0\1\7"+
    "\1\0\1\7\2\0\1\7\4\0\2\7\1\206\2\7"+
    "\1\0\4\7\1\0\3\7\3\0\7\7\12\0\3\7"+
    "\17\0\1\207\43\0\1\7\1\0\1\7\2\0\1\7"+
    "\4\0\3\7\1\210\1\7\1\0\4\7\1\0\3\7"+
    "\3\0\7\7\12\0\3\7\17\0\1\211\43\0\1\7"+
    "\1\0\1\7\2\0\1\7\4\0\3\7\1\212\1\7"+
    "\1\0\4\7\1\0\3\7\3\0\7\7\12\0\3\7"+
    "\2\0\1\7\1\0\1\7\2\0\1\7\4\0\3\7"+
    "\1\213\1\7\1\0\4\7\1\0\3\7\3\0\7\7"+
    "\12\0\3\7\13\0\2\214\46\0\1\7\1\0\1\7"+
    "\2\0\1\7\3\0\1\214\1\215\4\7\1\0\4\7"+
    "\1\0\3\7\3\0\7\7\12\0\3\7\20\0\1\216"+
    "\101\0\1\217\76\0\1\220\3\0\1\7\1\0\1\7"+
    "\2\0\1\7\4\0\4\7\1\221\1\0\4\7\1\0"+
    "\3\7\3\0\7\7\12\0\3\7\2\0\1\7\1\0"+
    "\1\7\2\0\1\7\4\0\5\7\1\0\4\7\1\0"+
    "\3\7\3\0\4\7\1\222\2\7\12\0\3\7\2\0"+
    "\1\7\1\0\1\7\2\0\1\7\4\0\5\7\1\0"+
    "\4\7\1\0\3\7\3\0\7\7\12\0\1\7\1\223"+
    "\1\7\2\0\1\7\1\0\1\7\2\0\1\7\4\0"+
    "\5\7\1\0\4\7\1\0\3\7\3\0\6\7\1\224"+
    "\12\0\3\7\57\0\1\225\3\0\1\7\1\0\1\7"+
    "\2\0\1\7\4\0\5\7\1\0\4\7\1\0\3\7"+
    "\3\0\7\7\12\0\1\7\1\226\1\7\2\0\1\7"+
    "\1\0\1\7\2\0\1\7\4\0\5\7\1\0\4\7"+
    "\1\0\1\7\1\227\1\7\3\0\7\7\12\0\3\7"+
    "\2\0\1\7\1\0\1\7\2\0\1\7\4\0\5\7"+
    "\1\0\4\7\1\0\3\7\3\0\1\7\1\230\5\7"+
    "\12\0\3\7\2\0\1\7\1\0\1\7\2\0\1\7"+
    "\4\0\5\7\1\0\4\7\1\0\3\7\3\0\3\7"+
    "\1\231\3\7\12\0\3\7\21\0\1\232\41\0\1\7"+
    "\1\0\1\7\2\0\1\7\4\0\5\7\1\232\4\7"+
    "\1\0\3\7\3\0\7\7\12\0\3\7\2\0\1\7"+
    "\1\0\1\7\2\0\1\7\3\0\1\233\1\234\4\7"+
    "\1\0\4\7\1\0\3\7\3\0\7\7\12\0\3\7"+
    "\2\0\1\7\1\0\1\7\2\0\1\7\4\0\5\7"+
    "\1\0\4\7\1\0\1\7\1\235\1\7\3\0\7\7"+
    "\12\0\3\7\22\0\1\236\61\0\1\237\53\0\1\240"+
    "\63\0\1\241\63\0\1\242\61\0\1\243\61\0\2\244"+
    "\61\0\1\245\46\0\1\246\73\0\1\247\57\0\1\250"+
    "\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5782];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\1\1\1\11\1\0\1\11"+
    "\1\0\4\1\1\11\2\1\1\0\3\1\3\11\3\1"+
    "\2\11\1\0\6\11\4\1\3\0\11\1\1\0\1\11"+
    "\6\1\1\0\1\11\4\1\1\11\4\0\4\1\1\0"+
    "\1\1\1\0\2\1\1\0\3\1\1\11\3\1\1\0"+
    "\2\1\1\11\2\1\1\0\1\1\3\0\4\1\1\11"+
    "\1\1\1\11\2\1\1\11\4\1\1\0\1\1\1\0"+
    "\2\1\1\0\1\1\1\11\1\1\3\0\4\1\1\0"+
    "\3\1\1\11\1\1\1\11\2\1\1\11\1\1\1\0"+
    "\2\11\4\1\1\11\4\1\1\0\1\11\2\1\12\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private void error(String message) {
    System.err.println("Error at line "+(yyline+1)+", column "+(yycolumn+1)+" : "+message);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  BestLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  BestLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 182) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return new Symbol(INTLITERAL, yyline+1, yycolumn+1, new Integer(Integer.parseInt(yytext())));
          }
        case 42: break;
        case 2: 
          { return new Symbol(MINUS, yyline+1, yycolumn+1);
          }
        case 43: break;
        case 3: 
          { /*ignore! */
          }
        case 44: break;
        case 4: 
          { return new Symbol(IDENTIFIER, yyline+1, yycolumn+yytext().length(), yytext());
          }
        case 45: break;
        case 5: 
          { /* ignore */
          }
        case 46: break;
        case 6: 
          { return new Symbol(TIMES, yyline+1, yycolumn+1);
          }
        case 47: break;
        case 7: 
          { return new Symbol(DOT, yyline+1, yycolumn+1);
          }
        case 48: break;
        case 8: 
          { return new Symbol(LPAREN, yyline+1, yycolumn+1);
          }
        case 49: break;
        case 9: 
          { return new Symbol(RPAREN, yyline+1, yycolumn+1);
          }
        case 50: break;
        case 10: 
          { return new Symbol(NOT, yyline+1, yycolumn+1);
          }
        case 51: break;
        case 11: 
          { return new Symbol(LBRACKET, yyline+1, yycolumn+1);
          }
        case 52: break;
        case 12: 
          { return new Symbol(RBRACKET, yyline+1, yycolumn+1);
          }
        case 53: break;
        case 13: 
          { return new Symbol(COMMA, yyline+1, yycolumn+1);
          }
        case 54: break;
        case 14: 
          { return new Symbol(LESSTHAN, yyline+1, yycolumn+1);
          }
        case 55: break;
        case 15: 
          { return new Symbol(PLUS, yyline+1, yycolumn+1);
          }
        case 56: break;
        case 16: 
          { return new Symbol(EQUALS, yyline+1, yycolumn+1);
          }
        case 57: break;
        case 17: 
          { return new Symbol(SEMICOLON, yyline+1, yycolumn+1);
          }
        case 58: break;
        case 18: 
          { return new Symbol(LBRACE, yyline+1, yycolumn+1);
          }
        case 59: break;
        case 19: 
          { return new Symbol(RBRACE, yyline+1, yycolumn+1);
          }
        case 60: break;
        case 20: 
          { /* ignore! */
          }
        case 61: break;
        case 21: 
          { return new Symbol(IF, yyline+1, yycolumn+2);
          }
        case 62: break;
        case 22: 
          { return new Symbol(AND, yyline+1, yycolumn+2);
          }
        case 63: break;
        case 23: 
          { return new Symbol(INT, yyline+1, yycolumn+3);
          }
        case 64: break;
        case 24: 
          { return new Symbol(NEW, yyline+1, yycolumn+3);
          }
        case 65: break;
        case 25: 
          { error("Illegal character <"+ yytext()+">");
          }
        case 66: break;
        case 26: 
          { return new Symbol(TRUE, yyline+1, yycolumn+4);
          }
        case 67: break;
        case 27: 
          { return new Symbol(THIS, yyline+1, yycolumn+4);
          }
        case 68: break;
        case 28: 
          { return new Symbol(ELSE, yyline+1, yycolumn+4);
          }
        case 69: break;
        case 29: 
          { return new Symbol(MAIN, yyline+1, yycolumn+4);
          }
        case 70: break;
        case 30: 
          { return new Symbol(VOID, yyline+1, yycolumn+4);
          }
        case 71: break;
        case 31: 
          { return new Symbol(WHILE, yyline+1, yycolumn+5);
          }
        case 72: break;
        case 32: 
          { return new Symbol(FALSE, yyline+1, yycolumn+5);
          }
        case 73: break;
        case 33: 
          { return new Symbol(CLASS, yyline+1, yycolumn+5);
          }
        case 74: break;
        case 34: 
          { return new Symbol(STRING, yyline+1, yycolumn+6);
          }
        case 75: break;
        case 35: 
          { return new Symbol(STATIC, yyline+1, yycolumn+6);
          }
        case 76: break;
        case 36: 
          { return new Symbol(PUBLIC, yyline+1, yycolumn+6);
          }
        case 77: break;
        case 37: 
          { return new Symbol(RETURN, yyline+1, yycolumn+6);
          }
        case 78: break;
        case 38: 
          { return new Symbol(LENGTH, yyline+1, yycolumn+6);
          }
        case 79: break;
        case 39: 
          { return new Symbol(EXTENDS, yyline+1, yycolumn+7);
          }
        case 80: break;
        case 40: 
          { return new Symbol(BOOLEAN, yyline+1, yycolumn+7);
          }
        case 81: break;
        case 41: 
          { return new Symbol(PRINTLN, yyline+1, yycolumn+18);
          }
        case 82: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
