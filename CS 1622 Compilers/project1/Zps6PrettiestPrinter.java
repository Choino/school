/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Copyright (C) 2014-2014  Zach Sadler <zps6@pitt.edu>                    *
 * All rights reserved.                                                    *
 *                                                                         *
 * License: BSD                                                            *
 *                                                                         *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>Zps6PrettiestPrinter.flex</tt>
 */
public class Zps6PrettiestPrinter {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int EMPTYPARENS = 2;
  public static final int INPARENS = 4;
  public static final int CLASSDECLARATION = 6;
  public static final int METHODDECLARATION = 8;
  public static final int IFTIMEWOOO = 10;
  public static final int BLOCKCOMMENTSBLOW = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\53\1\46"+
    "\2\0\1\6\1\0\1\43\1\0\1\51\1\52\1\5\1\44\1\60"+
    "\1\45\1\10\1\4\1\15\11\16\1\0\1\54\1\44\1\44\3\0"+
    "\22\6\1\55\7\6\1\56\1\0\1\57\1\0\1\6\1\0\1\23"+
    "\1\17\1\30\1\32\1\22\1\34\1\37\1\12\1\13\1\6\1\26"+
    "\1\21\1\35\1\24\1\20\1\36\1\6\1\25\1\14\1\11\1\31"+
    "\1\40\1\41\1\33\1\27\1\42\1\47\1\0\1\50\1\0\41\7"+
    "\2\0\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0\1\6"+
    "\5\0\27\6\1\0\37\6\1\0\u013f\6\31\0\162\6\4\0\14\6"+
    "\16\0\5\6\11\0\1\6\21\0\130\7\5\0\23\7\12\0\1\6"+
    "\13\0\1\6\1\0\3\6\1\0\1\6\1\0\24\6\1\0\54\6"+
    "\1\0\46\6\1\0\5\6\4\0\202\6\1\0\4\7\3\0\105\6"+
    "\1\0\46\6\2\0\2\6\6\0\20\6\41\0\46\6\2\0\1\6"+
    "\7\0\47\6\11\0\21\7\1\0\27\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\1\0\1\7\13\0\33\6\5\0\3\6\15\0\4\7"+
    "\14\0\6\7\13\0\32\6\5\0\13\6\16\7\7\0\12\7\4\0"+
    "\2\6\1\7\143\6\1\0\1\6\10\7\1\0\6\7\2\6\2\7"+
    "\1\0\4\7\2\6\12\7\3\6\2\0\1\6\17\0\1\7\1\6"+
    "\1\7\36\6\33\7\2\0\3\6\60\0\46\6\13\7\1\6\u014f\0"+
    "\3\7\66\6\2\0\1\7\1\6\20\7\2\0\1\6\4\7\3\0"+
    "\12\6\2\7\2\0\12\7\21\0\3\7\1\0\10\6\2\0\2\6"+
    "\2\0\26\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0\1\7"+
    "\1\6\7\7\2\0\2\7\2\0\3\7\11\0\1\7\4\0\2\6"+
    "\1\0\3\6\2\7\2\0\12\7\4\6\15\0\3\7\1\0\6\6"+
    "\4\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7"+
    "\13\0\4\6\1\0\1\6\7\0\14\7\3\6\14\0\3\7\1\0"+
    "\11\6\1\0\3\6\1\0\26\6\1\0\7\6\1\0\2\6\1\0"+
    "\5\6\2\0\1\7\1\6\10\7\1\0\3\7\1\0\3\7\2\0"+
    "\1\6\17\0\2\6\2\7\2\0\12\7\1\0\1\6\17\0\3\7"+
    "\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6"+
    "\1\0\5\6\2\0\1\7\1\6\6\7\3\0\2\7\2\0\3\7"+
    "\10\0\2\7\4\0\2\6\1\0\3\6\4\0\12\7\1\0\1\6"+
    "\20\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0"+
    "\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0"+
    "\10\6\1\0\3\6\4\0\5\7\3\0\3\7\1\0\4\7\11\0"+
    "\1\7\17\0\11\7\11\0\1\6\7\0\3\7\1\0\10\6\1\0"+
    "\3\6\1\0\27\6\1\0\12\6\1\0\5\6\4\0\7\7\1\0"+
    "\3\7\1\0\4\7\7\0\2\7\11\0\2\6\4\0\12\7\22\0"+
    "\2\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0"+
    "\5\6\2\0\1\7\1\6\7\7\1\0\3\7\1\0\4\7\7\0"+
    "\2\7\7\0\1\6\1\0\2\6\4\0\12\7\22\0\2\7\1\0"+
    "\10\6\1\0\3\6\1\0\27\6\1\0\20\6\4\0\6\7\2\0"+
    "\3\7\1\0\4\7\11\0\1\7\10\0\2\6\4\0\12\7\22\0"+
    "\2\7\1\0\22\6\3\0\30\6\1\0\11\6\1\0\1\6\2\0"+
    "\7\6\3\0\1\7\4\0\6\7\1\0\1\7\1\0\10\7\22\0"+
    "\2\7\15\0\60\6\1\7\2\6\7\7\4\0\10\6\10\7\1\0"+
    "\12\7\47\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0"+
    "\1\6\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0"+
    "\1\6\2\0\2\6\1\0\4\6\1\7\2\6\6\7\1\0\2\7"+
    "\1\6\2\0\5\6\1\0\1\6\1\0\6\7\2\0\12\7\2\0"+
    "\2\6\42\0\1\6\27\0\2\7\6\0\12\7\13\0\1\7\1\0"+
    "\1\7\1\0\1\7\4\0\2\7\10\6\1\0\42\6\6\0\24\7"+
    "\1\0\2\7\4\6\4\0\10\7\1\0\44\7\11\0\1\7\71\0"+
    "\42\6\1\0\5\6\1\0\2\6\1\0\7\7\3\0\4\7\6\0"+
    "\12\7\6\0\6\6\4\7\106\0\46\6\12\0\51\6\7\0\132\6"+
    "\5\0\104\6\5\0\122\6\6\0\7\6\1\0\77\6\1\0\1\6"+
    "\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\47\6"+
    "\1\0\1\6\1\0\4\6\2\0\37\6\1\0\1\6\1\0\4\6"+
    "\2\0\7\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0\7\6"+
    "\1\0\27\6\1\0\37\6\1\0\1\6\1\0\4\6\2\0\7\6"+
    "\1\0\47\6\1\0\23\6\16\0\11\7\56\0\125\6\14\0\u026c\6"+
    "\2\0\10\6\12\0\32\6\5\0\113\6\3\0\3\6\17\0\15\6"+
    "\1\0\4\6\3\7\13\0\22\6\3\7\13\0\22\6\2\7\14\0"+
    "\15\6\1\0\3\6\1\0\2\7\14\0\64\6\40\7\3\0\1\6"+
    "\3\0\2\6\1\7\2\0\12\7\41\0\3\7\2\0\12\7\6\0"+
    "\130\6\10\0\51\6\1\7\126\0\35\6\3\0\14\7\4\0\14\7"+
    "\12\0\12\7\36\6\2\0\5\6\u038b\0\154\6\224\0\234\6\4\0"+
    "\132\6\6\0\26\6\2\0\6\6\2\0\46\6\2\0\6\6\2\0"+
    "\10\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\37\6\2\0"+
    "\65\6\1\0\7\6\1\0\1\6\3\0\3\6\1\0\7\6\3\0"+
    "\4\6\2\0\6\6\4\0\15\6\5\0\3\6\1\0\7\6\17\0"+
    "\4\7\32\0\5\7\20\0\2\6\23\0\1\6\13\0\4\7\6\0"+
    "\6\7\1\0\1\6\15\0\1\6\40\0\22\6\36\0\15\7\4\0"+
    "\1\7\3\0\6\7\27\0\1\6\4\0\1\6\2\0\12\6\1\0"+
    "\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\3\6\1\0\7\6\3\0\3\6\5\0\5\6\26\0"+
    "\44\6\u0e81\0\3\6\31\0\11\6\6\7\1\0\5\6\2\0\5\6"+
    "\4\0\126\6\2\0\2\7\2\0\3\6\1\0\137\6\5\0\50\6"+
    "\4\0\136\6\21\0\30\6\70\0\20\6\u0200\0\u19b6\6\112\0\u51a6\6"+
    "\132\0\u048d\6\u0773\0\u2ba4\6\u215c\0\u012e\6\2\0\73\6\225\0\7\6"+
    "\14\0\5\6\5\0\1\6\1\7\12\6\1\0\15\6\1\0\5\6"+
    "\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6"+
    "\22\0\100\6\2\0\66\6\50\0\15\6\3\0\20\7\20\0\4\7"+
    "\17\0\2\6\30\0\3\6\31\0\1\6\6\0\5\6\1\0\207\6"+
    "\2\0\1\7\4\0\1\6\13\0\12\7\7\0\32\6\4\0\1\6"+
    "\1\0\32\6\12\0\132\6\3\0\6\6\2\0\6\6\2\0\6\6"+
    "\2\0\3\6\3\0\2\6\3\0\2\6\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\6\0\1\2\2\1\1\2\1\3\23\4"+
    "\1\2\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\2\15\1\16\1\4\2\3\1\17\1\20\1\4"+
    "\1\1\1\3\1\21\1\22\1\3\1\23\2\24\2\23"+
    "\1\2\2\23\5\0\1\25\1\26\1\0\1\27\1\4"+
    "\1\0\3\4\1\3\6\4\1\0\1\30\1\0\15\4"+
    "\1\3\12\4\1\0\1\31\1\0\1\32\1\0\1\33"+
    "\1\0\1\34\1\0\1\35\1\0\1\36\2\0\1\37"+
    "\1\0\1\40\1\4\1\0\1\41\1\3\2\0\1\42"+
    "\1\0\2\25\4\4\2\3\1\4\1\0\1\43\37\4"+
    "\1\3\1\44\13\4\1\45\20\4\2\3\10\4\1\45"+
    "\1\46\1\45\3\4\1\47\1\4\1\3\4\4\1\3"+
    "\1\4\1\3\6\4\1\0\3\4\1\50\1\0\1\51"+
    "\1\4\1\3\6\4\1\52\1\4\3\0\3\4\1\53"+
    "\2\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[269];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u021b\0\u027d\0\u021b"+
    "\0\u02ae\0\u021b\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4"+
    "\0\u0405\0\u0436\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c"+
    "\0\u058d\0\u05be\0\u05ef\0\u0620\0\u021b\0\u021b\0\u0651\0\u021b"+
    "\0\u021b\0\u0682\0\u06b3\0\u021b\0\u06e4\0\u021b\0\u021b\0\u0715"+
    "\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c\0\u021b"+
    "\0\u089d\0\u08ce\0\u021b\0\u08ff\0\u0930\0\u0930\0\u027d\0\u0961"+
    "\0\u0682\0\u06b3\0\u0992\0\u09c3\0\u09f4\0\u021b\0\u0a25\0\u0a56"+
    "\0\u021b\0\u0a87\0\u021b\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c"+
    "\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\u0372"+
    "\0\u021b\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a"+
    "\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2"+
    "\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109\0\u113a"+
    "\0\u116b\0\u119c\0\u0651\0\u021b\0\u0682\0\u021b\0\u06b3\0\u021b"+
    "\0\u11cd\0\u021b\0\u11fe\0\u021b\0\u0746\0\u021b\0\u122f\0\u07a8"+
    "\0\u021b\0\u07d9\0\u021b\0\u1260\0\u089d\0\u021b\0\u1291\0\u0930"+
    "\0\u12c2\0\u12f3\0\u0961\0\u1324\0\u021b\0\u1355\0\u1386\0\u13b7"+
    "\0\u13e8\0\u02ae\0\u1419\0\u144a\0\u147b\0\u021b\0\u14ac\0\u14dd"+
    "\0\u150e\0\u153f\0\u1570\0\u15a1\0\u15d2\0\u1603\0\u1634\0\u1665"+
    "\0\u1696\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b\0\u17bc\0\u17ed"+
    "\0\u181e\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u1913\0\u1944\0\u1975"+
    "\0\u19a6\0\u19d7\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\u12f3\0\u1acc"+
    "\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1\0\u1bf2\0\u1c23\0\u1c54"+
    "\0\u1c85\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a\0\u1dab\0\u1ddc"+
    "\0\u1e0d\0\u1e3e\0\u1e6f\0\u1ea0\0\u1ed1\0\u1f02\0\u1f33\0\u1f64"+
    "\0\u1f95\0\u1fc6\0\u1ff7\0\u2028\0\u1386\0\u2059\0\u208a\0\u20bb"+
    "\0\u20ec\0\u211d\0\u214e\0\u217f\0\u21b0\0\u21e1\0\u2212\0\u2243"+
    "\0\u2274\0\u22a5\0\u22d6\0\u02ae\0\u2307\0\u2338\0\u2369\0\u239a"+
    "\0\u23cb\0\u23fc\0\u242d\0\u245e\0\u248f\0\u24c0\0\u24f1\0\u2522"+
    "\0\u2553\0\u2584\0\u25b5\0\u25e6\0\u2617\0\u2648\0\u2679\0\u02ae"+
    "\0\u26aa\0\u021b\0\u26db\0\u270c\0\u273d\0\u276e\0\u279f\0\u27d0"+
    "\0\u2801\0\u2832\0\u021b\0\u2863\0\u2894\0\u28c5\0\u28f6\0\u2927"+
    "\0\u2958\0\u2989\0\u021b\0\u29ba\0\u29eb";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[269];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\14\1\15\2\16\1\17\1\20\1\21\1\14\1\22"+
    "\1\23\1\21\1\24\1\25\1\26\1\27\1\30\1\21"+
    "\1\31\1\32\1\21\1\33\1\34\2\21\1\35\1\21"+
    "\1\36\1\21\1\37\1\21\1\40\1\41\1\42\1\43"+
    "\1\21\1\44\2\20\1\22\1\45\1\46\1\47\1\50"+
    "\1\16\1\51\1\21\1\52\1\53\1\54\1\14\1\55"+
    "\2\56\1\17\40\14\2\22\3\14\1\57\1\56\2\14"+
    "\1\52\1\53\1\54\1\14\1\15\2\16\1\17\1\20"+
    "\1\60\1\14\1\22\4\60\1\61\1\62\24\60\1\44"+
    "\2\20\1\22\2\14\1\63\1\64\1\16\1\14\1\65"+
    "\1\52\1\53\1\54\1\14\3\66\1\17\1\14\1\67"+
    "\2\14\4\67\2\14\24\67\2\14\2\22\1\70\3\14"+
    "\1\66\1\14\1\67\1\52\1\53\1\54\1\14\3\66"+
    "\1\17\1\20\1\67\2\14\4\67\2\14\24\67\1\44"+
    "\2\20\1\22\1\70\1\14\1\71\1\20\1\66\1\14"+
    "\1\72\1\52\1\53\1\54\4\14\1\17\40\14\2\22"+
    "\7\14\1\52\1\53\1\54\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\45\73\1\76\2\73\1\101\1\102\1\73"+
    "\6\0\1\103\2\0\4\103\2\0\24\103\12\0\1\103"+
    "\10\0\1\104\35\0\1\105\2\104\30\0\1\106\1\107"+
    "\114\0\1\104\71\0\1\16\62\0\1\110\1\111\54\0"+
    "\3\112\1\0\1\113\2\21\1\114\32\21\1\115\2\113"+
    "\5\0\1\112\1\0\1\21\4\0\3\112\1\0\1\113"+
    "\2\21\1\114\1\21\1\116\12\21\1\117\15\21\1\115"+
    "\2\113\5\0\1\112\1\0\1\21\4\0\3\112\1\0"+
    "\1\113\2\21\1\114\13\21\1\120\7\21\1\121\1\122"+
    "\5\21\1\115\2\113\5\0\1\112\1\0\1\21\4\0"+
    "\3\112\1\0\1\113\2\21\1\114\1\123\1\124\14\21"+
    "\1\125\1\21\1\126\7\21\1\127\1\21\1\115\2\113"+
    "\5\0\1\112\1\0\1\21\4\0\3\130\1\0\1\131"+
    "\35\0\1\132\2\131\5\0\1\130\6\0\3\130\1\0"+
    "\1\131\7\0\2\27\24\0\1\132\2\131\5\0\1\130"+
    "\6\0\3\112\1\0\1\113\2\21\1\114\7\21\1\133"+
    "\4\21\1\134\1\21\1\135\13\21\1\115\2\113\5\0"+
    "\1\112\1\0\1\21\4\0\3\112\1\0\1\113\2\21"+
    "\1\114\7\21\1\136\22\21\1\115\2\113\5\0\1\112"+
    "\1\0\1\21\4\0\3\112\1\0\1\113\2\21\1\114"+
    "\10\21\1\137\11\21\1\140\7\21\1\115\2\113\5\0"+
    "\1\112\1\0\1\21\4\0\3\112\1\0\1\113\2\21"+
    "\1\114\11\21\1\141\1\142\17\21\1\115\2\113\5\0"+
    "\1\112\1\0\1\21\4\0\3\112\1\0\1\113\2\21"+
    "\1\114\11\21\1\143\20\21\1\115\2\113\5\0\1\112"+
    "\1\0\1\21\4\0\3\112\1\0\1\113\2\21\1\114"+
    "\1\21\1\144\5\21\1\145\1\146\1\21\1\147\17\21"+
    "\1\115\2\113\5\0\1\112\1\0\1\21\4\0\3\112"+
    "\1\0\1\113\2\21\1\114\7\21\1\150\1\21\1\151"+
    "\20\21\1\115\2\113\5\0\1\112\1\0\1\21\4\0"+
    "\3\112\1\0\1\113\2\21\1\114\2\21\1\152\4\21"+
    "\1\153\1\154\21\21\1\115\2\113\5\0\1\112\1\0"+
    "\1\21\4\0\3\112\1\0\1\113\2\21\1\114\12\21"+
    "\1\155\1\21\1\156\3\21\1\157\11\21\1\115\2\113"+
    "\5\0\1\112\1\0\1\21\4\0\3\112\1\0\1\113"+
    "\2\21\1\114\7\21\1\160\22\21\1\115\2\113\5\0"+
    "\1\112\1\0\1\21\4\0\3\112\1\0\1\113\2\21"+
    "\1\114\7\21\1\161\22\21\1\115\2\113\5\0\1\112"+
    "\1\0\1\21\4\0\3\112\1\0\1\113\2\21\1\114"+
    "\1\21\1\162\30\21\1\115\2\113\5\0\1\112\1\0"+
    "\1\21\46\0\1\20\16\0\3\163\46\0\1\164\1\163"+
    "\6\0\3\165\47\0\1\165\3\0\1\166\2\0\3\167"+
    "\47\0\1\167\1\170\6\0\1\56\57\0\3\171\1\0"+
    "\1\172\2\60\1\0\32\60\1\173\2\172\4\0\1\174"+
    "\1\171\1\0\1\60\4\0\3\175\1\0\1\176\35\0"+
    "\1\177\2\176\5\0\1\175\6\0\3\175\1\0\1\176"+
    "\7\0\2\62\24\0\1\177\2\176\5\0\1\175\6\0"+
    "\3\200\46\0\1\201\1\200\6\0\3\202\43\0\1\203"+
    "\3\0\1\202\6\0\3\171\1\0\1\172\2\60\1\0"+
    "\1\204\31\60\1\173\2\172\4\0\1\174\1\171\1\0"+
    "\1\60\4\0\3\66\47\0\1\66\13\0\2\67\1\0"+
    "\32\67\12\0\1\67\4\0\3\205\46\0\1\206\1\205"+
    "\13\0\2\67\1\0\1\207\31\67\12\0\1\67\4\0"+
    "\1\210\1\75\1\210\1\0\1\211\45\0\1\210\6\0"+
    "\3\210\1\0\1\211\45\0\1\210\11\0\1\212\1\213"+
    "\61\0\2\103\1\0\32\103\12\0\1\103\4\0\3\104"+
    "\47\0\1\104\50\0\1\104\32\0\2\107\42\0\1\110"+
    "\1\214\1\215\56\110\1\0\3\112\1\0\1\113\35\0"+
    "\1\115\2\113\5\0\1\112\13\0\1\216\1\0\1\114"+
    "\4\216\2\0\24\216\12\0\1\216\46\0\1\113\16\0"+
    "\3\112\1\0\1\113\2\21\1\114\2\21\1\217\11\21"+
    "\1\220\15\21\1\115\2\113\5\0\1\112\1\0\1\21"+
    "\4\0\3\112\1\0\1\113\2\21\1\114\12\21\1\221"+
    "\3\21\1\222\13\21\1\115\2\113\5\0\1\112\1\0"+
    "\1\21\4\0\3\112\1\0\1\113\2\21\1\114\1\223"+
    "\2\21\1\224\26\21\1\115\2\113\5\0\1\112\1\0"+
    "\1\21\4\0\3\225\1\0\1\113\2\21\1\114\32\21"+
    "\1\115\2\113\3\0\1\226\1\0\1\225\1\0\1\21"+
    "\4\0\3\112\1\0\1\113\2\21\1\114\25\21\1\227"+
    "\4\21\1\115\2\113\5\0\1\112\1\0\1\21\4\0"+
    "\3\112\1\0\1\113\2\21\1\114\12\21\1\230\1\21"+
    "\1\231\15\21\1\115\2\113\5\0\1\112\1\0\1\21"+
    "\4\0\3\112\1\0\1\113\2\21\1\114\7\21\1\232"+
    "\22\21\1\115\2\113\5\0\1\112\1\0\1\21\4\0"+
    "\3\112\1\0\1\113\2\21\1\114\13\21\1\233\16\21"+
    "\1\115\2\113\5\0\1\112\1\0\1\21\4\0\3\112"+
    "\1\0\1\113\2\21\1\114\25\21\1\234\4\21\1\115"+
    "\2\113\5\0\1\112\1\0\1\21\4\0\3\112\1\0"+
    "\1\113\2\21\1\114\2\21\1\235\27\21\1\115\2\113"+
    "\5\0\1\112\1\0\1\21\46\0\1\131\16\0\3\112"+
    "\1\0\1\113\2\21\1\114\7\21\1\236\22\21\1\115"+
    "\2\113\5\0\1\112\1\0\1\21\4\0\3\112\1\0"+
    "\1\113\2\21\1\114\11\21\1\237\20\21\1\115\2\113"+
    "\5\0\1\112\1\0\1\21\4\0\3\112\1\0\1\113"+
    "\2\21\1\114\1\240\31\21\1\115\2\113\5\0\1\112"+
    "\1\0\1\21\4\0\3\112\1\0\1\113\2\21\1\114"+
    "\13\21\1\241\16\21\1\115\2\113\5\0\1\112\1\0"+
    "\1\21\4\0\3\112\1\0\1\113\2\21\1\114\3\21"+
    "\1\242\26\21\1\115\2\113\5\0\1\112\1\0\1\21"+
    "\4\0\3\112\1\0\1\113\2\21\1\114\1\243\31\21"+
    "\1\115\2\113\5\0\1\112\1\0\1\21\4\0\3\112"+
    "\1\0\1\113\2\21\1\114\30\21\1\222\1\21\1\115"+
    "\2\113\5\0\1\112\1\0\1\21\4\0\3\112\1\0"+
    "\1\113\2\21\1\114\1\244\31\21\1\115\2\113\5\0"+
    "\1\112\1\0\1\21\4\0\3\112\1\0\1\113\2\21"+
    "\1\114\1\245\31\21\1\115\2\113\5\0\1\112\1\0"+
    "\1\21\4\0\3\112\1\0\1\113\2\21\1\114\12\21"+
    "\1\153\17\21\1\115\2\113\5\0\1\112\1\0\1\21"+
    "\4\0\3\112\1\0\1\113\2\21\1\114\13\21\1\246"+
    "\16\21\1\115\2\113\5\0\1\112\1\0\1\21\4\0"+
    "\3\112\1\0\1\113\2\21\1\114\12\21\1\247\17\21"+
    "\1\115\2\113\5\0\1\112\1\0\1\21\4\0\3\112"+
    "\1\0\1\113\2\21\1\114\1\250\2\21\1\240\26\21"+
    "\1\115\2\113\5\0\1\112\1\0\1\21\4\0\3\112"+
    "\1\0\1\113\2\21\1\114\20\21\1\251\11\21\1\115"+
    "\2\113\5\0\1\112\1\0\1\21\4\0\3\112\1\0"+
    "\1\113\2\21\1\114\23\21\1\252\6\21\1\115\2\113"+
    "\5\0\1\112\1\0\1\21\4\0\3\112\1\0\1\113"+
    "\2\21\1\114\13\21\1\253\16\21\1\115\2\113\5\0"+
    "\1\112\1\0\1\21\4\0\3\112\1\0\1\113\2\21"+
    "\1\114\14\21\1\222\15\21\1\115\2\113\5\0\1\112"+
    "\1\0\1\21\4\0\3\112\1\0\1\113\2\21\1\114"+
    "\7\21\1\254\22\21\1\115\2\113\5\0\1\112\1\0"+
    "\1\21\4\0\3\112\1\0\1\113\2\21\1\114\17\21"+
    "\1\255\12\21\1\115\2\113\5\0\1\112\1\0\1\21"+
    "\4\0\3\112\1\0\1\113\2\21\1\114\2\21\1\256"+
    "\4\21\1\257\22\21\1\115\2\113\5\0\1\112\1\0"+
    "\1\21\4\0\3\112\1\0\1\113\2\21\1\114\6\21"+
    "\1\260\23\21\1\115\2\113\5\0\1\112\1\0\1\21"+
    "\4\0\3\112\1\0\1\113\2\21\1\114\1\261\31\21"+
    "\1\115\2\113\5\0\1\112\1\0\1\21\4\0\3\112"+
    "\1\0\1\113\2\21\1\114\2\21\1\262\5\21\1\263"+
    "\21\21\1\115\2\113\5\0\1\112\1\0\1\21\4\0"+
    "\3\112\1\0\1\113\2\21\1\114\2\21\1\264\27\21"+
    "\1\115\2\113\5\0\1\112\1\0\1\21\4\0\3\171"+
    "\1\0\1\172\35\0\1\173\2\172\4\0\1\174\1\171"+
    "\50\0\1\172\60\0\1\176\16\0\3\171\1\0\1\172"+
    "\2\60\1\0\14\60\1\265\15\60\1\173\2\172\4\0"+
    "\1\174\1\171\1\0\1\60\11\0\2\67\1\0\14\67"+
    "\1\266\15\67\12\0\1\67\7\0\1\267\1\211\54\0"+
    "\3\267\47\0\1\267\7\0\1\215\64\0\2\216\1\114"+
    "\32\216\12\0\1\216\4\0\3\112\1\0\1\113\2\21"+
    "\1\114\3\21\1\222\26\21\1\115\2\113\5\0\1\112"+
    "\1\0\1\21\4\0\3\112\1\0\1\113\2\21\1\114"+
    "\7\21\1\270\22\21\1\115\2\113\5\0\1\112\1\0"+
    "\1\21\4\0\3\112\1\0\1\113\2\21\1\114\13\21"+
    "\1\271\16\21\1\115\2\113\5\0\1\112\1\0\1\21"+
    "\4\0\3\112\1\0\1\113\2\21\1\114\11\21\1\272"+
    "\20\21\1\115\2\113\5\0\1\112\1\0\1\21\4\0"+
    "\3\112\1\0\1\113\2\21\1\114\1\273\31\21\1\115"+
    "\2\113\5\0\1\112\1\0\1\21\4\0\3\225\1\0"+
    "\1\113\35\0\1\115\2\113\3\0\1\226\1\0\1\225"+
    "\6\0\3\112\1\0\1\113\2\21\1\114\7\21\1\232"+
    "\1\274\21\21\1\115\2\113\5\0\1\112\1\0\1\21"+
    "\4\0\3\112\1\0\1\113\2\21\1\114\1\275\31\21"+
    "\1\115\2\113\5\0\1\112\1\0\1\21\4\0\3\112"+
    "\1\0\1\113\2\21\1\114\2\21\1\276\27\21\1\115"+
    "\2\113\5\0\1\112\1\0\1\21\4\0\3\112\1\0"+
    "\1\113\2\21\1\114\14\21\1\277\15\21\1\115\2\113"+
    "\5\0\1\112\1\0\1\21\4\0\3\112\1\0\1\113"+
    "\2\21\1\114\17\21\1\300\12\21\1\115\2\113\5\0"+
    "\1\112\1\0\1\21\4\0\3\112\1\0\1\113\2\21"+
    "\1\114\11\21\1\153\20\21\1\115\2\113\5\0\1\112"+
    "\1\0\1\21\4\0\3\112\1\0\1\113\2\21\1\114"+
    "\1\250\31\21\1\115\2\113\5\0\1\112\1\0\1\21"+
    "\4\0\3\112\1\0\1\113\2\21\1\114\10\21\1\301"+
    "\21\21\1\115\2\113\5\0\1\112\1\0\1\21\4\0"+
    "\3\112\1\0\1\113\2\21\1\114\12\21\1\302\17\21"+
    "\1\115\2\113\5\0\1\112\1\0\1\21\4\0\3\112"+
    "\1\0\1\113\2\21\1\114\11\21\1\222\20\21\1\115"+
    "\2\113\5\0\1\112\1\0\1\21\4\0\3\112\1\0"+
    "\1\113\2\21\1\114\26\21\1\222\3\21\1\115\2\113"+
    "\5\0\1\112\1\0\1\21\4\0\3\112\1\0\1\113"+
    "\2\21\1\114\11\21\1\303\20\21\1\115\2\113\5\0"+
    "\1\112\1\0\1\21\4\0\3\112\1\0\1\113\2\21"+
    "\1\114\11\21\1\304\20\21\1\115\2\113\5\0\1\112"+
    "\1\0\1\21\4\0\3\112\1\0\1\113\2\21\1\114"+
    "\2\21\1\305\27\21\1\115\2\113\5\0\1\112\1\0"+
    "\1\21\4\0\3\112\1\0\1\113\2\21\1\114\20\21"+
    "\1\306\11\21\1\115\2\113\5\0\1\112\1\0\1\21"+
    "\4\0\3\112\1\0\1\113\2\21\1\114\1\307\2\21"+
    "\1\277\26\21\1\115\2\113\5\0\1\112\1\0\1\21"+
    "\4\0\3\112\1\0\1\113\2\21\1\114\3\21\1\310"+
    "\26\21\1\115\2\113\5\0\1\112\1\0\1\21\4\0"+
    "\3\112\1\0\1\113\2\21\1\114\17\21\1\311\12\21"+
    "\1\115\2\113\5\0\1\112\1\0\1\21\4\0\3\112"+
    "\1\0\1\113\2\21\1\114\6\21\1\312\23\21\1\115"+
    "\2\113\5\0\1\112\1\0\1\21\4\0\3\112\1\0"+
    "\1\113\2\21\1\114\12\21\1\313\17\21\1\115\2\113"+
    "\5\0\1\112\1\0\1\21\4\0\3\112\1\0\1\113"+
    "\2\21\1\114\12\21\1\314\17\21\1\115\2\113\5\0"+
    "\1\112\1\0\1\21\4\0\3\112\1\0\1\113\2\21"+
    "\1\114\12\21\1\277\17\21\1\115\2\113\5\0\1\112"+
    "\1\0\1\21\4\0\3\112\1\0\1\113\2\21\1\114"+
    "\15\21\1\315\14\21\1\115\2\113\5\0\1\112\1\0"+
    "\1\21\4\0\3\112\1\0\1\113\2\21\1\114\27\21"+
    "\1\316\2\21\1\115\2\113\5\0\1\112\1\0\1\21"+
    "\4\0\3\112\1\0\1\113\2\21\1\114\1\317\31\21"+
    "\1\115\2\113\5\0\1\112\1\0\1\21\4\0\3\112"+
    "\1\0\1\113\2\21\1\114\10\21\1\320\21\21\1\115"+
    "\2\113\5\0\1\112\1\0\1\21\4\0\3\112\1\0"+
    "\1\113\2\21\1\114\7\21\1\222\22\21\1\115\2\113"+
    "\5\0\1\112\1\0\1\21\4\0\3\112\1\0\1\113"+
    "\2\21\1\114\21\21\1\222\10\21\1\115\2\113\5\0"+
    "\1\112\1\0\1\21\4\0\3\112\1\0\1\113\2\21"+
    "\1\114\12\21\1\321\17\21\1\115\2\113\5\0\1\112"+
    "\1\0\1\21\4\0\3\112\1\0\1\113\2\21\1\114"+
    "\10\21\1\322\21\21\1\115\2\113\5\0\1\112\1\0"+
    "\1\21\4\0\3\171\1\0\1\172\2\60\1\0\2\60"+
    "\1\323\27\60\1\173\2\172\4\0\1\174\1\171\1\0"+
    "\1\60\11\0\2\67\1\0\2\67\1\324\27\67\12\0"+
    "\1\67\4\0\3\112\1\0\1\113\2\21\1\114\30\21"+
    "\1\325\1\21\1\115\2\113\5\0\1\112\1\0\1\21"+
    "\4\0\3\112\1\0\1\113\2\21\1\114\3\21\1\326"+
    "\26\21\1\115\2\113\5\0\1\112\1\0\1\21\4\0"+
    "\3\112\1\0\1\113\2\21\1\114\14\21\1\327\15\21"+
    "\1\115\2\113\5\0\1\112\1\0\1\21\4\0\3\112"+
    "\1\0\1\113\2\21\1\114\12\21\1\330\17\21\1\115"+
    "\2\113\5\0\1\112\1\0\1\21\4\0\3\112\1\0"+
    "\1\113\2\21\1\114\11\21\1\331\20\21\1\115\2\113"+
    "\5\0\1\112\1\0\1\21\4\0\3\112\1\0\1\113"+
    "\2\21\1\114\2\21\1\332\27\21\1\115\2\113\5\0"+
    "\1\112\1\0\1\21\4\0\3\112\1\0\1\113\2\21"+
    "\1\114\17\21\1\333\12\21\1\115\2\113\5\0\1\112"+
    "\1\0\1\21\4\0\3\112\1\0\1\113\2\21\1\114"+
    "\1\222\31\21\1\115\2\113\5\0\1\112\1\0\1\21"+
    "\4\0\3\112\1\0\1\113\2\21\1\114\1\21\1\334"+
    "\30\21\1\115\2\113\5\0\1\112\1\0\1\21\4\0"+
    "\3\112\1\0\1\113\2\21\1\114\11\21\1\335\20\21"+
    "\1\115\2\113\5\0\1\112\1\0\1\21\4\0\3\112"+
    "\1\0\1\113\2\21\1\114\15\21\1\222\14\21\1\115"+
    "\2\113\5\0\1\112\1\0\1\21\4\0\3\336\1\0"+
    "\1\113\2\21\1\114\32\21\1\115\2\113\1\0\1\337"+
    "\3\0\1\340\1\0\1\21\4\0\3\112\1\0\1\113"+
    "\2\21\1\114\13\21\1\341\16\21\1\115\2\113\5\0"+
    "\1\112\1\0\1\21\4\0\3\112\1\0\1\113\2\21"+
    "\1\114\27\21\1\240\2\21\1\115\2\113\5\0\1\112"+
    "\1\0\1\21\4\0\3\112\1\0\1\113\2\21\1\114"+
    "\14\21\1\342\15\21\1\115\2\113\5\0\1\112\1\0"+
    "\1\21\4\0\3\112\1\0\1\113\2\21\1\114\2\21"+
    "\1\343\27\21\1\115\2\113\5\0\1\112\1\0\1\21"+
    "\4\0\3\112\1\0\1\113\2\21\1\114\3\21\1\344"+
    "\26\21\1\115\2\113\5\0\1\112\1\0\1\21\4\0"+
    "\3\112\1\0\1\113\2\21\1\114\1\21\1\222\30\21"+
    "\1\115\2\113\5\0\1\112\1\0\1\21\4\0\3\112"+
    "\1\0\1\113\2\21\1\114\10\21\1\240\21\21\1\115"+
    "\2\113\5\0\1\112\1\0\1\21\4\0\3\112\1\0"+
    "\1\113\2\21\1\114\20\21\1\345\11\21\1\115\2\113"+
    "\5\0\1\112\1\0\1\21\4\0\3\112\1\0\1\113"+
    "\2\21\1\114\10\21\1\346\21\21\1\115\2\113\5\0"+
    "\1\112\1\0\1\21\4\0\3\112\1\0\1\113\2\21"+
    "\1\114\12\21\1\347\17\21\1\115\2\113\5\0\1\112"+
    "\1\0\1\21\4\0\3\112\1\0\1\113\2\21\1\114"+
    "\12\21\1\135\17\21\1\115\2\113\5\0\1\112\1\0"+
    "\1\21\4\0\3\112\1\0\1\113\2\21\1\114\11\21"+
    "\1\350\20\21\1\115\2\113\5\0\1\112\1\0\1\21"+
    "\4\0\3\112\1\0\1\113\2\21\1\114\2\21\1\351"+
    "\27\21\1\115\2\113\5\0\1\112\1\0\1\21\4\0"+
    "\3\112\1\0\1\113\2\21\1\114\1\352\31\21\1\115"+
    "\2\113\5\0\1\112\1\0\1\21\4\0\3\112\1\0"+
    "\1\113\2\21\1\114\11\21\1\353\20\21\1\115\2\113"+
    "\5\0\1\112\1\0\1\21\4\0\3\171\1\0\1\172"+
    "\2\60\1\0\13\60\1\354\16\60\1\173\2\172\4\0"+
    "\1\174\1\171\1\0\1\60\11\0\2\67\1\0\13\67"+
    "\1\355\16\67\12\0\1\67\4\0\3\112\1\0\1\113"+
    "\2\21\1\114\2\21\1\356\27\21\1\115\2\113\5\0"+
    "\1\112\1\0\1\21\4\0\3\112\1\0\1\113\2\21"+
    "\1\114\23\21\1\357\6\21\1\115\2\113\5\0\1\112"+
    "\1\0\1\21\4\0\3\112\1\0\1\113\2\21\1\114"+
    "\13\21\1\360\16\21\1\115\2\113\5\0\1\112\1\0"+
    "\1\21\4\0\3\112\1\0\1\113\2\21\1\114\24\21"+
    "\1\361\5\21\1\115\2\113\5\0\1\112\1\0\1\21"+
    "\4\0\3\112\1\0\1\113\2\21\1\114\17\21\1\222"+
    "\12\21\1\115\2\113\5\0\1\112\1\0\1\21\4\0"+
    "\3\112\1\0\1\113\2\21\1\114\1\362\31\21\1\115"+
    "\2\113\5\0\1\112\1\0\1\21\4\0\3\112\1\0"+
    "\1\113\2\21\1\114\14\21\1\363\15\21\1\115\2\113"+
    "\5\0\1\112\1\0\1\21\4\0\3\112\1\0\1\113"+
    "\2\21\1\114\12\21\1\342\17\21\1\115\2\113\5\0"+
    "\1\112\1\0\1\21\4\0\3\336\1\0\1\113\35\0"+
    "\1\115\2\113\1\0\1\337\3\0\1\336\6\0\3\337"+
    "\47\0\1\337\6\0\3\340\1\0\1\113\5\0\1\364"+
    "\27\0\1\115\2\113\1\0\1\337\3\0\1\340\6\0"+
    "\3\112\1\0\1\113\2\21\1\114\21\21\1\217\10\21"+
    "\1\115\2\113\5\0\1\112\1\0\1\21\4\0\3\112"+
    "\1\0\1\113\2\21\1\114\13\21\1\222\16\21\1\115"+
    "\2\113\5\0\1\112\1\0\1\21\4\0\3\112\1\0"+
    "\1\113\2\21\1\114\13\21\1\365\16\21\1\115\2\113"+
    "\5\0\1\112\1\0\1\21\4\0\3\112\1\0\1\113"+
    "\2\21\1\114\10\21\1\277\21\21\1\115\2\113\5\0"+
    "\1\112\1\0\1\21\4\0\3\112\1\0\1\113\2\21"+
    "\1\114\10\21\1\366\21\21\1\115\2\113\5\0\1\112"+
    "\1\0\1\21\4\0\3\112\1\0\1\113\2\21\1\114"+
    "\26\21\1\240\3\21\1\115\2\113\5\0\1\112\1\0"+
    "\1\21\4\0\3\112\1\0\1\113\2\21\1\114\17\21"+
    "\1\367\12\21\1\115\2\113\5\0\1\112\1\0\1\21"+
    "\4\0\3\112\1\0\1\113\2\21\1\114\17\21\1\370"+
    "\12\21\1\115\2\113\5\0\1\112\1\0\1\21\4\0"+
    "\3\112\1\0\1\113\2\21\1\114\2\21\1\312\27\21"+
    "\1\115\2\113\5\0\1\112\1\0\1\21\4\0\3\371"+
    "\1\0\1\113\2\21\1\114\32\21\1\115\2\113\3\0"+
    "\1\372\1\0\1\371\1\0\1\21\4\0\3\171\1\0"+
    "\1\172\2\60\1\0\26\60\1\373\3\60\1\173\2\172"+
    "\4\0\1\174\1\171\1\0\1\60\11\0\2\67\1\0"+
    "\26\67\1\374\3\67\12\0\1\67\4\0\3\112\1\0"+
    "\1\113\2\21\1\114\11\21\1\375\20\21\1\115\2\113"+
    "\5\0\1\112\1\0\1\21\4\0\3\112\1\0\1\113"+
    "\2\21\1\114\12\21\1\376\17\21\1\115\2\113\5\0"+
    "\1\112\1\0\1\21\4\0\3\112\1\0\1\113\2\21"+
    "\1\114\17\21\1\377\12\21\1\115\2\113\5\0\1\112"+
    "\1\0\1\21\4\0\3\112\1\0\1\113\2\21\1\114"+
    "\11\21\1\u0100\20\21\1\115\2\113\5\0\1\112\1\0"+
    "\1\21\4\0\3\112\1\0\1\113\2\21\1\114\23\21"+
    "\1\u0101\6\21\1\115\2\113\5\0\1\112\1\0\1\21"+
    "\4\0\3\112\1\0\1\113\2\21\1\114\7\21\1\u0102"+
    "\22\21\1\115\2\113\5\0\1\112\1\0\1\21\37\0"+
    "\1\u0103\25\0\3\112\1\0\1\113\2\21\1\114\20\21"+
    "\1\240\11\21\1\115\2\113\5\0\1\112\1\0\1\21"+
    "\4\0\3\112\1\0\1\113\2\21\1\114\16\21\1\222"+
    "\13\21\1\115\2\113\5\0\1\112\1\0\1\21\4\0"+
    "\3\112\1\0\1\113\2\21\1\114\1\u0104\31\21\1\115"+
    "\2\113\5\0\1\112\1\0\1\21\4\0\3\371\1\0"+
    "\1\113\35\0\1\115\2\113\3\0\1\372\1\0\1\371"+
    "\6\0\3\u0105\1\0\1\172\2\60\1\0\32\60\1\173"+
    "\2\172\4\0\1\174\1\u0105\1\0\1\60\1\u0106\3\0"+
    "\3\u0107\2\0\2\67\1\0\32\67\10\0\1\u0107\1\0"+
    "\1\67\1\u0106\3\0\3\112\1\0\1\113\2\21\1\114"+
    "\13\21\1\277\16\21\1\115\2\113\5\0\1\112\1\0"+
    "\1\21\4\0\3\112\1\0\1\113\2\21\1\114\17\21"+
    "\1\240\12\21\1\115\2\113\5\0\1\112\1\0\1\21"+
    "\4\0\3\112\1\0\1\113\2\21\1\114\11\21\1\u0108"+
    "\20\21\1\115\2\113\5\0\1\112\1\0\1\21\4\0"+
    "\3\112\1\0\1\113\2\21\1\114\13\21\1\u0109\16\21"+
    "\1\115\2\113\5\0\1\112\1\0\1\21\4\0\3\112"+
    "\1\0\1\113\2\21\1\114\25\21\1\222\4\21\1\115"+
    "\2\113\5\0\1\112\1\0\1\21\4\0\3\112\1\0"+
    "\1\113\2\21\1\114\13\21\1\u010a\16\21\1\115\2\113"+
    "\5\0\1\112\1\0\1\21\4\0\3\112\1\0\1\113"+
    "\2\21\1\114\11\21\1\262\20\21\1\115\2\113\5\0"+
    "\1\112\1\0\1\21\4\0\3\u0105\1\0\1\172\35\0"+
    "\1\173\2\172\4\0\1\174\1\u0105\2\0\1\u0106\3\0"+
    "\3\u0106\47\0\1\u0106\3\0\1\u010b\2\0\3\u0107\47\0"+
    "\1\u0107\2\0\1\u0106\3\0\3\112\1\0\1\113\2\21"+
    "\1\114\7\21\1\u010c\22\21\1\115\2\113\5\0\1\112"+
    "\1\0\1\21\4\0\3\112\1\0\1\113\2\21\1\114"+
    "\1\217\31\21\1\115\2\113\5\0\1\112\1\0\1\21"+
    "\4\0\3\112\1\0\1\113\2\21\1\114\2\21\1\u010d"+
    "\27\21\1\115\2\113\5\0\1\112\1\0\1\21\4\0"+
    "\3\112\1\0\1\113\2\21\1\114\23\21\1\222\6\21"+
    "\1\115\2\113\5\0\1\112\1\0\1\21\4\0\3\112"+
    "\1\0\1\113\2\21\1\114\31\21\1\u0104\1\115\2\113"+
    "\5\0\1\112\1\0\1\21\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10780];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\1\6\0\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\22\1\2\11\1\1\2\11\2\1\1\11"+
    "\1\1\2\11\10\1\1\11\2\1\1\11\11\1\1\0"+
    "\1\11\2\1\1\11\1\0\1\11\1\1\1\0\12\1"+
    "\1\0\1\11\1\0\30\1\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\1\1\0\1\11\1\1"+
    "\2\0\1\1\1\0\1\1\1\11\7\1\1\0\1\11"+
    "\135\1\1\0\4\1\1\0\1\11\10\1\1\11\1\1"+
    "\3\0\3\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[269];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */

  int SPACES_PER_TABS = 8;

  StringBuilder string = new StringBuilder();
  StringBuilder tabBuilder = new StringBuilder();
  String space = " ";
  int returnState;
  int ifParenBalance;
  int unindentPls = 0;
  int inIf = 0;
  int currentColumn;

  int indentationLevel = 0;
  int unindent = 0;

  private void print(String a) {
    System.out.print(a);
  }

  private String getTabs() {
    tabBuilder.setLength(0);

    for (int i = 0; i < indentationLevel; i++) {
      tabBuilder.append("\t");
    }
    return tabBuilder.toString();
  }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Zps6PrettiestPrinter(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Zps6PrettiestPrinter(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1758) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public void yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { /* do nothing */
          }
        case 44: break;
        case 2: 
          { throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);
          }
        case 45: break;
        case 3: 
          { print(yytext() + space);
          }
        case 46: break;
        case 4: 
          { print(yytext());
          }
        case 47: break;
        case 5: 
          { indentationLevel++; print("{\n" + getTabs());
          }
        case 48: break;
        case 6: 
          { indentationLevel--; print("\r" + getTabs() + yytext() + "\n" + getTabs());
          }
        case 49: break;
        case 7: 
          { print("(" + space); ifParenBalance = 1; inIf = 0; yybegin(INPARENS);
          }
        case 50: break;
        case 8: 
          { print(")");
          }
        case 51: break;
        case 9: 
          { if (unindentPls > 0) { indentationLevel--; unindentPls--; } print(";\n" + getTabs());
          }
        case 52: break;
        case 10: 
          { print("[ ");
          }
        case 53: break;
        case 11: 
          { print(" ] ");
          }
        case 54: break;
        case 12: 
          { print("\b" + yytext() + space);
          }
        case 55: break;
        case 13: 
          { /* do nothing, no whitespace in empty parens */
          }
        case 56: break;
        case 14: 
          { print(")"); if (returnState == INPARENS) { yybegin(INPARENS); returnState = YYINITIAL; } else { yybegin(YYINITIAL); }
          }
        case 57: break;
        case 15: 
          { print("( "); ifParenBalance++;
          }
        case 58: break;
        case 16: 
          { print(") "); ifParenBalance--; if (ifParenBalance == 0 && inIf == 1) { inIf = 0; indentationLevel++; print("\n" + getTabs()); unindentPls++; yybegin(YYINITIAL); } else if (ifParenBalance == 0 && inIf == 0) { print("\b"); yybegin(YYINITIAL); }
          }
        case 59: break;
        case 17: 
          { indentationLevel++; print("{\n" + getTabs()); yybegin(YYINITIAL);
          }
        case 60: break;
        case 18: 
          { print("(" + space);
          }
        case 61: break;
        case 19: 
          { currentColumn += yytext().length(); if (currentColumn <= 80) { print(yytext()); } else if (currentColumn > 80) { print(yytext().substring(0,80-(currentColumn-yytext().length())) + "\n" + getTabs() + yytext().substring(80-(currentColumn-yytext().length()))); currentColumn = indentationLevel*SPACES_PER_TABS; }
          }
        case 62: break;
        case 20: 
          { print("\n" + getTabs()); currentColumn = indentationLevel*SPACES_PER_TABS;
          }
        case 63: break;
        case 21: 
          { /* discard line comments as per rule 9 */
          }
        case 64: break;
        case 22: 
          { print("\r"+getTabs()+"/*"); currentColumn = indentationLevel*SPACES_PER_TABS + 2; yybegin(BLOCKCOMMENTSBLOW);
          }
        case 65: break;
        case 23: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 7;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
              zzInput = zzBufferL[zzFPos++];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
            while (zzFPos <= zzMarkedPos) {
              zzFinL[zzFPos++] = false;
            }

            zzFState = 8;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL[--zzFPos];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { print(yytext() + space);
          }
        case 66: break;
        case 24: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 9;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
              zzInput = zzBufferL[zzFPos++];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
            while (zzFPos <= zzMarkedPos) {
              zzFinL[zzFPos++] = false;
            }

            zzFState = 8;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL[--zzFPos];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { print(yytext() + space);
          }
        case 67: break;
        case 25: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { print("("); yybegin(EMPTYPARENS);
          }
        case 68: break;
        case 26: 
          { print("[] ");
          }
        case 69: break;
        case 27: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { print(" ]");
          }
        case 70: break;
        case 28: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 7;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
              zzInput = zzBufferL[zzFPos++];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
            while (zzFPos <= zzMarkedPos) {
              zzFinL[zzFPos++] = false;
            }

            zzFState = 8;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL[--zzFPos];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { print(yytext() + space);
          }
        case 71: break;
        case 29: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 7;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
              zzInput = zzBufferL[zzFPos++];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
            while (zzFPos <= zzMarkedPos) {
              zzFinL[zzFPos++] = false;
            }

            zzFState = 10;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL[--zzFPos];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { print(yytext() + space);
          }
        case 72: break;
        case 30: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 9;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
              zzInput = zzBufferL[zzFPos++];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
            while (zzFPos <= zzMarkedPos) {
              zzFinL[zzFPos++] = false;
            }

            zzFState = 8;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL[--zzFPos];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { print(yytext() + space);
          }
        case 73: break;
        case 31: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { print("("); returnState = INPARENS; yybegin(EMPTYPARENS);
          }
        case 74: break;
        case 32: 
          { indentationLevel++; print(") {\n" + getTabs()); ifParenBalance = 0; yybegin(YYINITIAL);
          }
        case 75: break;
        case 33: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { print("(");
          }
        case 76: break;
        case 34: 
          { print("*/"); yybegin(YYINITIAL);
          }
        case 77: break;
        case 35: 
          { print("if" + space + "(" + space); ifParenBalance = 1; inIf = 1; yybegin(INPARENS);
          }
        case 78: break;
        case 36: 
          { print("\n" + getTabs() + "*/\n" + getTabs()); yybegin(YYINITIAL);
          }
        case 79: break;
        case 37: 
          { indentationLevel++; unindentPls++; print("else\n" + getTabs());
          }
        case 80: break;
        case 38: 
          { indentationLevel++; print("else {\n" + getTabs());
          }
        case 81: break;
        case 39: 
          { print(yytext() + space); yybegin(CLASSDECLARATION);
          }
        case 82: break;
        case 40: 
          { print(yytext() + space); yybegin(METHODDECLARATION);
          }
        case 83: break;
        case 41: 
          { print("while" + space + "(" + space); ifParenBalance = 1; inIf = 1; yybegin(INPARENS);
          }
        case 84: break;
        case 42: 
          { print("else" + space);
          }
        case 85: break;
        case 43: 
          { print("String[] ");
          }
        case 86: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
