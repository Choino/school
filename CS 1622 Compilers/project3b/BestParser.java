
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Apr 06 22:25:15 EDT 2014
//----------------------------------------------------

import java.util.ArrayList;
import java_cup.runtime.Symbol;
import java.util.Hashtable;
import syntaxtree.*;
import java.lang.Integer;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Apr 06 22:25:15 EDT 2014
  */
public class BestParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public BestParser() {super();}

  /** Constructor which sets the default scanner. */
  public BestParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public BestParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\004\000\002\002\004\000\002\003" +
    "\023\000\002\004\010\000\002\004\012\000\002\004\004" +
    "\000\002\005\004\000\002\005\002\000\002\006\005\000" +
    "\002\006\005\000\002\007\004\000\002\007\002\000\002" +
    "\010\017\000\002\010\016\000\002\010\004\000\002\011" +
    "\004\000\002\011\002\000\002\012\004\000\002\012\002" +
    "\000\002\012\004\000\002\013\005\000\002\013\002\000" +
    "\002\014\004\000\002\015\005\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\016\005\000\002\016" +
    "\011\000\002\016\007\000\002\016\007\000\002\016\006" +
    "\000\002\016\011\000\002\016\004\000\002\017\004\000" +
    "\002\017\002\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\006\000\002\020\005\000\002\020\010\000\002\020\003" +
    "\000\002\020\004\000\002\020\004\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\007\000\002\020\006\000\002\020\004\000\002\020" +
    "\005\000\002\021\004\000\002\021\002\000\002\022\005" +
    "\000\002\022\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\004\045\006\001\002\000\004\002\242\001" +
    "\002\000\010\002\ufffa\003\ufffa\045\ufffa\001\002\000\004" +
    "\050\007\001\002\000\004\032\010\001\002\000\004\035" +
    "\011\001\002\000\004\037\012\001\002\000\004\040\013" +
    "\001\002\000\004\041\014\001\002\000\004\004\015\001" +
    "\002\000\004\042\016\001\002\000\004\014\017\001\002" +
    "\000\004\015\020\001\002\000\004\050\021\001\002\000" +
    "\004\005\022\001\002\000\004\032\023\001\002\000\016" +
    "\003\025\027\032\030\030\031\031\032\024\050\027\001" +
    "\002\000\020\003\025\027\032\030\030\031\031\032\024" +
    "\033\uffde\050\027\001\002\000\004\026\141\001\002\000" +
    "\004\033\137\001\002\000\006\014\127\025\126\001\002" +
    "\000\004\004\122\001\002\000\004\004\114\001\002\000" +
    "\004\004\033\001\002\000\026\004\045\006\044\007\035" +
    "\011\042\012\036\013\041\022\037\023\034\047\046\050" +
    "\043\001\002\000\004\047\113\001\002\000\006\010\105" +
    "\050\104\001\002\000\030\005\uffd2\014\uffd2\015\uffd2\016" +
    "\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2" +
    "\026\uffd2\001\002\000\004\047\103\001\002\000\022\005" +
    "\101\014\055\017\051\020\054\021\057\022\052\023\053" +
    "\024\056\001\002\000\030\005\uffd1\014\uffd1\015\uffd1\016" +
    "\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1" +
    "\026\uffd1\001\002\000\030\005\uffcf\014\uffcf\015\uffcf\016" +
    "\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf" +
    "\026\uffcf\001\002\000\030\005\uffd0\014\uffd0\015\uffd0\016" +
    "\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0" +
    "\026\uffd0\001\002\000\026\004\045\006\044\007\035\011" +
    "\042\012\036\013\041\022\037\023\034\047\046\050\043" +
    "\001\002\000\026\004\045\006\044\007\035\011\042\012" +
    "\036\013\041\022\037\023\034\047\046\050\043\001\002" +
    "\000\030\005\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020" +
    "\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\026\uffd5\001\002" +
    "\000\022\005\050\014\055\017\051\020\054\021\057\022" +
    "\052\023\053\024\056\001\002\000\030\005\uffcb\014\uffcb" +
    "\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023" +
    "\uffcb\024\uffcb\026\uffcb\001\002\000\026\004\045\006\044" +
    "\007\035\011\042\012\036\013\041\022\037\023\034\047" +
    "\046\050\043\001\002\000\026\004\045\006\044\007\035" +
    "\011\042\012\036\013\041\022\037\023\034\047\046\050" +
    "\043\001\002\000\026\004\045\006\044\007\035\011\042" +
    "\012\036\013\041\022\037\023\034\047\046\050\043\001" +
    "\002\000\026\004\045\006\044\007\035\011\042\012\036" +
    "\013\041\022\037\023\034\047\046\050\043\001\002\000" +
    "\026\004\045\006\044\007\035\011\042\012\036\013\041" +
    "\022\037\023\034\047\046\050\043\001\002\000\026\004" +
    "\045\006\044\007\035\011\042\012\036\013\041\022\037" +
    "\023\034\047\046\050\043\001\002\000\006\044\060\050" +
    "\061\001\002\000\030\005\uffd7\014\uffd7\015\uffd7\016\uffd7" +
    "\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\026" +
    "\uffd7\001\002\000\004\004\062\001\002\000\030\004\045" +
    "\005\uffc9\006\044\007\035\011\042\012\036\013\041\022" +
    "\037\023\034\047\046\050\043\001\002\000\004\005\070" +
    "\001\002\000\024\005\uffc7\014\055\016\uffc7\017\051\020" +
    "\054\021\057\022\052\023\053\024\056\001\002\000\006" +
    "\005\uffca\016\066\001\002\000\026\004\045\006\044\007" +
    "\035\011\042\012\036\013\041\022\037\023\034\047\046" +
    "\050\043\001\002\000\024\005\uffc8\014\055\016\uffc8\017" +
    "\051\020\054\021\057\022\052\023\053\024\056\001\002" +
    "\000\030\005\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020" +
    "\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\026\uffd6\001\002" +
    "\000\030\005\uffd9\014\055\015\uffd9\016\uffd9\017\uffd9\020" +
    "\054\021\uffd9\022\uffd9\023\uffd9\024\uffd9\026\uffd9\001\002" +
    "\000\022\014\055\015\073\017\051\020\054\021\057\022" +
    "\052\023\053\024\056\001\002\000\030\005\uffd8\014\uffd8" +
    "\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023" +
    "\uffd8\024\uffd8\026\uffd8\001\002\000\030\005\uffdc\014\uffdc" +
    "\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023" +
    "\uffdc\024\uffdc\026\uffdc\001\002\000\030\005\uffda\014\055" +
    "\015\uffda\016\uffda\017\uffda\020\054\021\uffda\022\uffda\023" +
    "\uffda\024\056\026\uffda\001\002\000\030\005\uffdb\014\055" +
    "\015\uffdb\016\uffdb\017\uffdb\020\054\021\uffdb\022\uffdb\023" +
    "\uffdb\024\056\026\uffdb\001\002\000\030\005\uffdd\014\055" +
    "\015\uffdd\016\uffdd\017\uffdd\020\054\021\uffdd\022\052\023" +
    "\053\024\056\026\uffdd\001\002\000\030\005\uffcc\014\uffcc" +
    "\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023" +
    "\uffcc\024\uffcc\026\uffcc\001\002\000\004\026\102\001\002" +
    "\000\024\003\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033" +
    "\uffe3\036\uffe3\046\uffe3\050\uffe3\001\002\000\030\005\uffd4" +
    "\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022" +
    "\uffd4\023\uffd4\024\uffd4\026\uffd4\001\002\000\004\004\111" +
    "\001\002\000\004\014\106\001\002\000\026\004\045\006" +
    "\044\007\035\011\042\012\036\013\041\022\037\023\034" +
    "\047\046\050\043\001\002\000\022\014\055\015\110\017" +
    "\051\020\054\021\057\022\052\023\053\024\056\001\002" +
    "\000\030\005\uffce\014\uffce\015\uffce\016\uffce\017\uffce\020" +
    "\uffce\021\uffce\022\uffce\023\uffce\024\uffce\026\uffce\001\002" +
    "\000\004\005\112\001\002\000\030\005\uffcd\014\uffcd\015" +
    "\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd" +
    "\024\uffcd\026\uffcd\001\002\000\030\005\uffd3\014\uffd3\015" +
    "\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3" +
    "\024\uffd3\026\uffd3\001\002\000\026\004\045\006\044\007" +
    "\035\011\042\012\036\013\041\022\037\023\034\047\046" +
    "\050\043\001\002\000\022\005\116\014\055\017\051\020" +
    "\054\021\057\022\052\023\053\024\056\001\002\000\016" +
    "\003\025\027\032\030\030\031\031\032\024\050\027\001" +
    "\002\000\004\046\120\001\002\000\016\003\025\027\032" +
    "\030\030\031\031\032\024\050\027\001\002\000\024\003" +
    "\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\036\uffe5" +
    "\046\uffe5\050\uffe5\001\002\000\026\004\045\006\044\007" +
    "\035\011\042\012\036\013\041\022\037\023\034\047\046" +
    "\050\043\001\002\000\022\005\124\014\055\017\051\020" +
    "\054\021\057\022\052\023\053\024\056\001\002\000\016" +
    "\003\025\027\032\030\030\031\031\032\024\050\027\001" +
    "\002\000\024\003\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4" +
    "\033\uffe4\036\uffe4\046\uffe4\050\uffe4\001\002\000\026\004" +
    "\045\006\044\007\035\011\042\012\036\013\041\022\037" +
    "\023\034\047\046\050\043\001\002\000\026\004\045\006" +
    "\044\007\035\011\042\012\036\013\041\022\037\023\034" +
    "\047\046\050\043\001\002\000\022\014\055\015\131\017" +
    "\051\020\054\021\057\022\052\023\053\024\056\001\002" +
    "\000\004\025\132\001\002\000\026\004\045\006\044\007" +
    "\035\011\042\012\036\013\041\022\037\023\034\047\046" +
    "\050\043\001\002\000\022\014\055\017\051\020\054\021" +
    "\057\022\052\023\053\024\056\026\134\001\002\000\024" +
    "\003\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\036" +
    "\uffe1\046\uffe1\050\uffe1\001\002\000\022\014\055\017\051" +
    "\020\054\021\057\022\052\023\053\024\056\026\136\001" +
    "\002\000\024\003\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2" +
    "\033\uffe2\036\uffe2\046\uffe2\050\uffe2\001\002\000\004\033" +
    "\140\001\002\000\010\002\uffff\003\uffff\045\uffff\001\002" +
    "\000\024\003\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033" +
    "\uffe0\036\uffe0\046\uffe0\050\uffe0\001\002\000\022\003\025" +
    "\027\032\030\030\031\031\032\024\033\uffde\036\uffde\050" +
    "\027\001\002\000\004\033\144\001\002\000\024\003\uffe6" +
    "\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\036\uffe6\046" +
    "\uffe6\050\uffe6\001\002\000\006\033\uffdf\036\uffdf\001\002" +
    "\000\010\002\000\003\150\045\151\001\002\000\010\002" +
    "\ufffb\003\ufffb\045\ufffb\001\002\000\004\033\241\001\002" +
    "\000\004\050\152\001\002\000\006\032\153\043\154\001" +
    "\002\000\016\003\ufff6\010\ufff6\033\ufff6\034\ufff6\035\ufff6" +
    "\050\ufff6\001\002\000\004\050\155\001\002\000\004\032" +
    "\156\001\002\000\016\003\ufff6\010\ufff6\033\ufff6\034\ufff6" +
    "\035\ufff6\050\ufff6\001\002\000\016\003\ufff1\010\165\033" +
    "\ufff1\034\164\035\ufff1\050\162\001\002\000\006\003\232" +
    "\050\233\001\002\000\010\003\170\033\172\035\173\001" +
    "\002\000\006\003\uffe7\050\uffe7\001\002\000\030\003\ufff7" +
    "\010\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034" +
    "\ufff7\035\ufff7\036\ufff7\050\ufff7\001\002\000\006\003\uffe9" +
    "\050\uffe9\001\002\000\010\003\uffe8\014\166\050\uffe8\001" +
    "\002\000\004\015\167\001\002\000\006\003\uffea\050\uffea" +
    "\001\002\000\004\033\231\001\002\000\010\003\ufff2\033" +
    "\ufff2\035\ufff2\001\002\000\010\002\ufffd\003\ufffd\045\ufffd" +
    "\001\002\000\010\010\165\034\164\050\162\001\002\000" +
    "\004\050\175\001\002\000\004\004\176\001\002\000\014" +
    "\003\201\005\200\010\165\034\164\050\162\001\002\000" +
    "\004\050\230\001\002\000\004\032\221\001\002\000\004" +
    "\005\220\001\002\000\004\005\207\001\002\000\006\005" +
    "\uffec\016\uffec\001\002\000\006\005\ufff0\016\205\001\002" +
    "\000\010\010\165\034\164\050\162\001\002\000\006\005" +
    "\uffed\016\uffed\001\002\000\004\032\210\001\002\000\024" +
    "\003\ufff6\010\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\034" +
    "\ufff6\036\ufff6\050\ufff6\001\002\000\024\003\025\010\165" +
    "\027\032\030\030\031\031\032\024\034\164\036\uffde\050" +
    "\212\001\002\000\012\003\uffe7\014\127\025\126\050\uffe7" +
    "\001\002\000\004\036\214\001\002\000\026\004\045\006" +
    "\044\007\035\011\042\012\036\013\041\022\037\023\034" +
    "\047\046\050\043\001\002\000\022\014\055\017\051\020" +
    "\054\021\057\022\052\023\053\024\056\026\216\001\002" +
    "\000\004\033\217\001\002\000\010\003\ufff5\033\ufff5\035" +
    "\ufff5\001\002\000\004\005\uffee\001\002\000\024\003\ufff6" +
    "\010\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\034\ufff6\036" +
    "\ufff6\050\ufff6\001\002\000\024\003\025\010\165\027\032" +
    "\030\030\031\031\032\024\034\164\036\uffde\050\212\001" +
    "\002\000\004\036\224\001\002\000\026\004\045\006\044" +
    "\007\035\011\042\012\036\013\041\022\037\023\034\047" +
    "\046\050\043\001\002\000\022\014\055\017\051\020\054" +
    "\021\057\022\052\023\053\024\056\026\226\001\002\000" +
    "\004\033\227\001\002\000\010\003\ufff4\033\ufff4\035\ufff4" +
    "\001\002\000\006\005\uffeb\016\uffeb\001\002\000\010\003" +
    "\ufff3\033\ufff3\035\ufff3\001\002\000\004\026\235\001\002" +
    "\000\004\026\234\001\002\000\030\003\ufff9\010\ufff9\027" +
    "\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9" +
    "\036\ufff9\050\ufff9\001\002\000\030\003\ufff8\010\ufff8\027" +
    "\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8" +
    "\036\ufff8\050\ufff8\001\002\000\016\003\ufff1\010\165\033" +
    "\ufff1\034\164\035\ufff1\050\162\001\002\000\010\003\170" +
    "\033\240\035\173\001\002\000\010\002\ufffe\003\ufffe\045" +
    "\ufffe\001\002\000\010\002\ufffc\003\ufffc\045\ufffc\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\004\005\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\025\001\001" +
    "\000\006\016\141\017\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\077\001\001\000\004" +
    "\020\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\076\001\001\000\004\020\075" +
    "\001\001\000\004\020\074\001\001\000\004\020\073\001" +
    "\001\000\004\020\071\001\001\000\004\020\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\063\021\062\001\001\000\002\001\001\000\004" +
    "\022\064\001\001\000\002\001\001\000\004\020\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\114" +
    "\001\001\000\002\001\001\000\004\016\116\001\001\000" +
    "\002\001\001\000\004\016\120\001\001\000\002\001\001" +
    "\000\004\020\122\001\001\000\002\001\001\000\004\016" +
    "\124\001\001\000\002\001\001\000\004\020\134\001\001" +
    "\000\004\020\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\016\141" +
    "\017\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\235\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\156\001\001\000\010\006\162\011\160\015" +
    "\157\001\001\000\002\001\001\000\004\010\170\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\173\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\201\014\202\015\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\203\001\001\000\002\001\001\000\006\014\205\015" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\210\001\001\000\012\006\162\015\157\016\141\017" +
    "\212\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\214\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\221\001\001" +
    "\000\012\006\162\015\157\016\141\017\222\001\001\000" +
    "\002\001\001\000\004\020\224\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\162\011\236\015" +
    "\157\001\001\000\004\010\170\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$BestParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$BestParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$BestParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }

 
  BestLexer lexer;
  Program finishedProduct;
  public boolean doneMessedUp = false;

  public BestParser(BestLexer lex) {
      super(lex);
      lexer = lex;
  }

  public void report_error(String msg, Object info) {
  	doneMessedUp = true;

	if (msg.equals("Syntax error")) {
		msg = "Generic syntax error";
	}
	if (info instanceof Symbol) {
		return;
	}
	else {
		Token s = (Token)info;
		System.out.println(msg + " at line" + s.line + ", column " + s.column);
	}
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$BestParser$actions {
  private final BestParser parser;

  /** Constructor */
  CUP$BestParser$actions(BestParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$BestParser$do_action(
    int                        CUP$BestParser$act_num,
    java_cup.runtime.lr_parser CUP$BestParser$parser,
    java.util.Stack            CUP$BestParser$stack,
    int                        CUP$BestParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$BestParser$result;

      /* select the action based on the action number */
      switch (CUP$BestParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // _ExpressionPart ::= 
            {
              ExpList RESULT =null;
		 RESULT = new ExpList(); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("_ExpressionPart",16, ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // _ExpressionPart ::= _ExpressionPart COMMA Expression 
            {
              ExpList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).right;
		ExpList l = (ExpList)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$BestParser$stack.peek()).value;
		 l.addElement(r); RESULT = l; 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("_ExpressionPart",16, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // _ExpressionList ::= 
            {
              ExpList RESULT =null;
		 RESULT = new ExpList(); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("_ExpressionList",15, ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // _ExpressionList ::= Expression _ExpressionPart 
            {
              ExpList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).right;
		ExpList r = (ExpList)((java_cup.runtime.Symbol) CUP$BestParser$stack.peek()).value;
		 ExpList ans = new ExpList();
		ans.addElement(l);
		for (int i = 0; i < r.size(); i++) {
			ans.addElement(r.elementAt(i));
		}
		RESULT = ans;
	
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("_ExpressionList",15, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expression ::= LPAREN Expression RPAREN 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).value;
		 RESULT = l; 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expression ::= NOT Expression 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$BestParser$stack.peek()).value;
		 RESULT = new Not(l); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expression ::= NEW IDENTIFIER LPAREN RPAREN 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).value;
		 RESULT = new NewObject(new Identifier((String)l.content)); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-3)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expression ::= NEW INT LBRACKET Expression RBRACKET 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).value;
		 RESULT = new NewArray(l); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-4)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expression ::= THIS 
            {
              Exp RESULT =null;
		 RESULT = new This(); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expression ::= IDENTIFIER 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$BestParser$stack.peek()).value;
		 RESULT = new IdentifierExp((String)l.content);  
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expression ::= FALSE 
            {
              Exp RESULT =null;
		 RESULT = new False(); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expression ::= TRUE 
            {
              Exp RESULT =null;
		 RESULT = new True(); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expression ::= MINUS INTLITERAL 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$BestParser$stack.peek()).value;
		 RESULT = new IntegerLiteral(-(Integer)l.content); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expression ::= PLUS INTLITERAL 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$BestParser$stack.peek()).value;
		 RESULT = new IntegerLiteral((Integer)l.content); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expression ::= INTLITERAL 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$BestParser$stack.peek()).value;
		 RESULT = new IntegerLiteral((Integer)l.content);  
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expression ::= Expression DOT IDENTIFIER LPAREN _ExpressionList RPAREN 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-5)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-5)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-3)).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).right;
		ExpList r = (ExpList)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).value;
		 RESULT = new Call(l, new Identifier((String)m.content), r); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-5)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expression ::= Expression DOT LENGTH 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).value;
		 RESULT = new ArrayLength(l); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expression ::= Expression LBRACKET Expression RBRACKET 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-3)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).value;
		 RESULT = new ArrayLookup(l, r); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-3)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expression ::= Expression TIMES Expression 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$BestParser$stack.peek()).value;
		 RESULT = new Times(l, r); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expression ::= Expression MINUS Expression 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$BestParser$stack.peek()).value;
		 RESULT = new Minus(l, r); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expression ::= Expression PLUS Expression 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$BestParser$stack.peek()).value;
		 RESULT = new Plus(l, r); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expression ::= Expression LESSTHAN Expression 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$BestParser$stack.peek()).value;
		 RESULT = new LessThan(l, r); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expression ::= Expression AND Expression 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$BestParser$stack.peek()).value;
		 RESULT = new And(l, r); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // _StatementList ::= 
            {
              StatementList RESULT =null;
		 RESULT = new StatementList(); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("_StatementList",13, ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // _StatementList ::= _Statement _StatementList 
            {
              StatementList RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).right;
		Statement r = (Statement)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$BestParser$stack.peek()).value;
		 l.addElement(r); RESULT = l; 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("_StatementList",13, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // _Statement ::= error SEMICOLON 
            {
              Statement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$BestParser$stack.peek()).value;
		 parser.report_error("Parse error", l); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("_Statement",12, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // _Statement ::= IDENTIFIER LBRACKET Expression RBRACKET EQUALS Expression SEMICOLON 
            {
              Statement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-6)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-6)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-4)).right;
		Exp m = (Exp)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).value;
		 RESULT = new ArrayAssign(new Identifier((String)l.content), m, r); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("_Statement",12, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-6)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // _Statement ::= IDENTIFIER EQUALS Expression SEMICOLON 
            {
              Statement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-3)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).value;
		 RESULT = new Assign(new Identifier((String)l.content), r); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("_Statement",12, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-3)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // _Statement ::= PRINTLN LPAREN Expression RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).value;
		 RESULT = new Print(l); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("_Statement",12, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-4)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // _Statement ::= WHILE LPAREN Expression RPAREN _Statement 
            {
              Statement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).right;
		Statement r = (Statement)((java_cup.runtime.Symbol) CUP$BestParser$stack.peek()).value;
		 RESULT = new While(l, r); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("_Statement",12, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-4)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // _Statement ::= IF LPAREN Expression RPAREN _Statement ELSE _Statement 
            {
              Statement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-4)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).right;
		Statement m = (Statement)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).right;
		Statement r = (Statement)((java_cup.runtime.Symbol) CUP$BestParser$stack.peek()).value;
		 RESULT = new If(l, m, r); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("_Statement",12, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-6)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // _Statement ::= LBRACE _StatementList RBRACE 
            {
              Statement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).value;
		 RESULT = new Block(l); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("_Statement",12, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // _Type ::= IDENTIFIER 
            {
              Type RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$BestParser$stack.peek()).value;
		 RESULT = new IdentifierType((String)l.content); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("_Type",11, ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // _Type ::= INT 
            {
              Type RESULT =null;
		 RESULT = new IntegerType(); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("_Type",11, ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // _Type ::= BOOLEAN 
            {
              Type RESULT =null;
		 RESULT = new BooleanType(); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("_Type",11, ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // _Type ::= INT LBRACKET RBRACKET 
            {
              Type RESULT =null;
		 RESULT = new IntArrayType(); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("_Type",11, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // _Formal ::= _Type IDENTIFIER 
            {
              Formal RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).right;
		Type l = (Type)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$BestParser$stack.peek()).value;
		 RESULT = new Formal(l, new Identifier((String)r.content)); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("_Formal",10, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // _FormalPart ::= 
            {
              FormalList RESULT =null;
		 RESULT = new FormalList(); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("_FormalPart",9, ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // _FormalPart ::= _FormalPart COMMA _Formal 
            {
              FormalList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).right;
		FormalList l = (FormalList)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).right;
		Formal r = (Formal)((java_cup.runtime.Symbol) CUP$BestParser$stack.peek()).value;
		 l.addElement(r); RESULT = l; 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("_FormalPart",9, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // _FormalList ::= error RPAREN 
            {
              FormalList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$BestParser$stack.peek()).value;
		 parser.report_error("Parse error", l); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("_FormalList",8, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // _FormalList ::= 
            {
              FormalList RESULT =null;
		 RESULT = new FormalList(); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("_FormalList",8, ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // _FormalList ::= _Formal _FormalPart 
            {
              FormalList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).right;
		Formal l = (Formal)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).right;
		FormalList r = (FormalList)((java_cup.runtime.Symbol) CUP$BestParser$stack.peek()).value;
		 
		FormalList ans = new FormalList();
		ans.addElement(l);
		for (int i = 0; i < r.size(); i++) {
			ans.addElement(r.elementAt(i));
		}
		RESULT = ans;
	
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("_FormalList",8, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // _MethodDeclList ::= 
            {
              MethodDeclList RESULT =null;
		 RESULT = new MethodDeclList(); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("_MethodDeclList",7, ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // _MethodDeclList ::= _MethodDeclList MethodDeclaration 
            {
              MethodDeclList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).right;
		MethodDeclList l = (MethodDeclList)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).right;
		MethodDecl r = (MethodDecl)((java_cup.runtime.Symbol) CUP$BestParser$stack.peek()).value;
		 l.addElement(r); RESULT = l; 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("_MethodDeclList",7, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MethodDeclaration ::= error RBRACE 
            {
              MethodDecl RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$BestParser$stack.peek()).value;
		 parser.report_error("Parse error", l); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("MethodDeclaration",6, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MethodDeclaration ::= PUBLIC _Type IDENTIFIER LPAREN RPAREN LBRACE _VarDeclList _StatementList RETURN Expression SEMICOLON RBRACE 
            {
              MethodDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-10)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-10)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-10)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-9)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-9)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-5)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-4)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).value;
		 RESULT = new MethodDecl(t, new Identifier((String)i.content), new FormalList(), v, s, e); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("MethodDeclaration",6, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-11)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MethodDeclaration ::= PUBLIC _Type IDENTIFIER LPAREN _FormalList RPAREN LBRACE _VarDeclList _StatementList RETURN Expression SEMICOLON RBRACE 
            {
              MethodDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-11)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-11)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-11)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-10)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-10)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-8)).right;
		FormalList f = (FormalList)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-8)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-5)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-4)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).value;
		 RESULT = new MethodDecl(t, new Identifier((String)i.content), f, v, s, e); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("MethodDeclaration",6, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-12)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // _VarDeclList ::= 
            {
              VarDeclList RESULT =null;
		 RESULT = new VarDeclList(); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("_VarDeclList",5, ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // _VarDeclList ::= _VarDeclList VarDeclaration 
            {
              VarDeclList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).right;
		VarDeclList l = (VarDeclList)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).right;
		VarDecl r = (VarDecl)((java_cup.runtime.Symbol) CUP$BestParser$stack.peek()).value;
		 l.addElement(r); RESULT = l; 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("_VarDeclList",5, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarDeclaration ::= _Type error SEMICOLON 
            {
              VarDecl RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$BestParser$stack.peek()).value;
		 parser.report_error("Parse error", l); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("VarDeclaration",4, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarDeclaration ::= _Type IDENTIFIER SEMICOLON 
            {
              VarDecl RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).right;
		Type l = (Type)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).value;
		 RESULT = new VarDecl(l, new Identifier((String)r.content)); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("VarDeclaration",4, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // _ClassDeclList ::= 
            {
              ClassDeclList RESULT =null;
		 RESULT = new ClassDeclList(); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("_ClassDeclList",3, ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // _ClassDeclList ::= _ClassDeclList ClassDeclaration 
            {
              ClassDeclList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).right;
		ClassDeclList l = (ClassDeclList)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).right;
		ClassDecl r = (ClassDecl)((java_cup.runtime.Symbol) CUP$BestParser$stack.peek()).value;
		 l.addElement(r); RESULT = l; 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("_ClassDeclList",3, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ClassDeclaration ::= error RBRACE 
            {
              ClassDecl RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$BestParser$stack.peek()).value;
		 parser.report_error("Parse error", l); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",2, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ClassDeclaration ::= CLASS IDENTIFIER EXTENDS IDENTIFIER LBRACE _VarDeclList _MethodDeclList RBRACE 
            {
              ClassDecl RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-6)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-6)).right;
		Token i1 = (Token)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-6)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-4)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-4)).right;
		Token i2 = (Token)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).right;
		VarDeclList m = (VarDeclList)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).right;
		MethodDeclList r = (MethodDeclList)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).value;
		 RESULT = new ClassDeclExtends(new Identifier((String)i1.content), new Identifier((String)i2.content), m, r); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",2, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-7)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ClassDeclaration ::= CLASS IDENTIFIER LBRACE _VarDeclList _MethodDeclList RBRACE 
            {
              ClassDecl RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-4)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).right;
		VarDeclList m = (VarDeclList)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).right;
		MethodDeclList r = (MethodDeclList)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).value;
		 RESULT = new ClassDeclSimple(new Identifier((String)l.content), m, r); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",2, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-5)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // _MainClass ::= CLASS IDENTIFIER LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET IDENTIFIER RPAREN LBRACE _Statement RBRACE RBRACE 
            {
              MainClass RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-15)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-15)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-15)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-5)).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).right;
		Statement r = (Statement)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-2)).value;
		 RESULT = new MainClass(new Identifier((String)l.content), new Identifier((String)m.content), r); 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("_MainClass",1, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-16)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Goal ::= _MainClass _ClassDeclList 
            {
              Program RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).right;
		MainClass l = (MainClass)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()).right;
		ClassDeclList r = (ClassDeclList)((java_cup.runtime.Symbol) CUP$BestParser$stack.peek()).value;
		 RESULT = new Program(l, r); parser.finishedProduct = RESULT; 
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("Goal",0, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          return CUP$BestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Goal EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)).value;
		RESULT = start_val;
              CUP$BestParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$BestParser$stack.elementAt(CUP$BestParser$top-1)), ((java_cup.runtime.Symbol)CUP$BestParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$BestParser$parser.done_parsing();
          return CUP$BestParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

